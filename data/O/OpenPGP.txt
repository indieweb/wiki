https://indieweb.org/OpenPGP

'''<dfn>[https://tools.ietf.org/html/rfc4880 OpenPGP]</dfn>''' (Pretty Good Privacy) is a message exchange format that uses public key cryptography to enable people to exchange encrypted and/or signed data. Whilst most often used to encrypt email, this page discusses indieweb uses for PGP.

<div style="float:right; width: 50%;">__TOC__</div>

== Terminology ==
;Pretty Good Privacy (PGP) 
:This is the name of the original software created by Phil Zimmermann in 1991. It is now owned by PGP Incorporated.
:The acronym "<abbr>PGP</abbr>" is commonly used as a catch-all when referring to this encryption format, though "<abbr>GPG</abbr>" is often the more technically correct term.

;OpenPGP:
:This is the name of the open standard for PGP encryption, proposed by Zimmermann to the IETF. The current RFC is https://tools.ietf.org/html/rfc4880.

;GNU Privacy Guard (GnuPG or GPG):
:This is the GPL-licensed, OpenPGP-compliant encryption software commonly used. Since the current version is 2.0.30 (as of 2017-01-21, it is also referred to as "GPG2." There is also the 2.1 branch of releases, currently at 2.1.17 (as of 2017-01-21), these are sometimes referred to as “GPG21”

== Reference ==

* [https://help.riseup.net/en/security/message-security/openpgp/gpg-best-practices OpenPGP Best Practices - help.riseup.net]
* [https://en.wikipedia.org/wiki/Pretty_Good_Privacy Pretty Good Privacy - Wikipedia]

== How to ==
=== Create a keypair ===
* {{gRegor}} found this four-post series to be helpful in setting up a keypair securely, including the option of using an OpenPGP smartcard:
** http://spin.atomicobject.com/2013/09/25/gpg-gnu-privacy-guard/
* {{aaronpk}} used https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/ in combination with the previous link.

=== Link to your public key ===
* Host the ASCII-armored public key on an [[https]] URL on your domain.
* Add a link from your page(s) with <code>rel="pgpkey"</code> and <code>type="application/pgp-keys"</code>:
** <code><link rel="pgpkey" type="application/pgp-keys" href="/key.pub"></code>

== IndieWeb Attendees using PGP to exchange encrypted messages ==

* [[User:aaronparecki.com|Aaron Parecki]] and [[User:sandeep.io|Sandeep Shetty]] have exchanged private posts/replies encrypted using PGP, exchanging keys using [[Keybase]] [http://www.sandeep.io/178]

=== Key Lookup Algorithm ===

Draft, please refine.

Summary:
* Goal: given a string identifier for a person (for example URL, email, twitter ID, key fingerprint), find their PGP key. Start with a decentralised approach, falling back to using key silos.
* Try to derive a canonical URL representing the person, e.g. their website
** If one is found, parse it for a representative [[h-card]] and use a non-URL "key" property as the person’s PGP key
** If no h-card is found look for a rel-key
** If an h-card u-key was found or a rel-key from previous step, retrieve it, use that as the person’s PGP key
* else, query a either a keyserver or a key silo like [[Keybase]] to search for the user’s PGP key
* otherwise: the user has no PGP key

Detail:
* Given <var>id</var>, a string identifier representing the person
* Is <var>id</var> a [[Twitter]] ID? If so let <var>url</var> be the user’s twitter.com profile page
* Is <var>id</var> an HTTP URL? If so let <var>url</var> be <var>id</var>
* Is <var>id</var> an email address? If so try a webfinger lookup on it.
** If the webfinger lookup succeeded, let <var>url</var> be the person’s URL
* Has <var>url</var> been set?
** If so use [[rel-me]] to find the person’s canonical URL
** Parse that URL for microformats including rel-key
** If a PGP key is found, use that as the PGP key for the current user.
* Otherwise, query keyservers/key silos of your choice to attempt to find a PGP key for <var>id</var>
* If none is found, the person probably has no PGP key.


== Secure communication ==

What does "secure communication" between two or more entities
really mean?

An entity can be a person, software running on behalf of a person (eg:
an app) or an online service (eg: a login service.) Let's just call
all these things 'parties'.

Focus on three areas.

# Authentication - can one or more of the parties prove to their satisfaction that they are talking to the "right" party?<br/>A login service is an example - it wants any any party talking to it to prove according some definition it cares about (like [[IndieAuth]]) - they are who they claim to be.
# Integrity - can one party ensure to their satisfaction that a message received from the other party hasn't been tampered with?<br/>An example is a download of a security update of some software, normally accompanied by a digital signature.<br/>You might also want something comparable for [[webmention]]s, especially if you embed content from your friends site into your own site. You might prefer picking up only verified portions of content created by a person you trust; rather than worrying whether you've accidentally picked up [[xss]] content inserted by someone who's hacked into their server.
# Confidentiality - can the parties communicate with each other with some well-understood guarantees on who can read their messages?<br/>An example might be PGP-encrypted email - anyone who has the private counterpart of the keys they are encrypting against; anyone who has access to the machine where the decryption occurs; anyone who finds a bug in a specific implementation of the software -- all these people can read their messages.

=== RealPolitik ===

Secure communication occurs within a messy interaction of four
motivations.

# How valuable is a piece of data to the party who owns it.<br/>Eg: A person with an indieweb site often hosts public data about themselves, and might not feel much desire to "protect" such content. They may however, also have data (private photos of their family, say) that they might feel is more valuable to them.
# How much effort is the party willing to take to protect their data.<br/>Most people use a sliding scale. eg: financial statements - more effort to protect it. Private photos - if they are creeped out by the thought of someone else looking at them, they might take some extra effort. Blog posts intended for public consumption - not much at all.
# How desirable is the data (or access) to an attacker.<br/>eg: An attacker might find a vulnerable indiewebsite as part of a botnet; rather than be interested in any data on the server itself. Or, they may find it gives them access to a more valuable site - say it has OAuth tokens that allows access into the owner's email and enables password reset into a bank.
# How much effort is the attacker willing to get to the data.<br/>If an indiewebsite includes a widespread vulnerability, it might take little to no effort to get into the site, regardless of the content on the site. If they find a valuable site (say, it hosts private messages between well-known net personalities) they might be willing to invest more effort to acquire the data.

So any solution should identify and solve specific threats, and stay
within the level of effort people are willing to invest in it. eg:
software that uses military-grade OpenPGP is as good as no security, if
using it is so hard that nobody uses it at all.

== Authentication ==

=== How to use PGP with IndieAuth ===

Provide a link to your PGP key from your home page with a rel value of "pgpkey". Then, when signing in via indieauth.com or other implementations, the site will provide a challenge that you can sign with you private key.

Full details: https://indieauth.com/gpg

=== Brainstorming ===

Alice is using her contact manager to add Bob to her contact list. The
contact manager has figured out Bob's canonical URL, and also
[[#Key_Lookup_Algorithm|found a key]] from (say)
[http://microformats.org/wiki/h-card hCard] data on the site and is
ready to add it to her contact list.

How can Alice increase confidence that this key is really from the
person she knows as Bob?

If Bob uses [[indieauth]] on his site, a simple check would appear to
be for the contact manager to verify and display the mutual [[rel-me]]
links to the various 'major' silo providers. Alice could quickly check
if they point to the "correct Bob" within the silos.

However, an indieweb site runs with decreased security; and some
threats are:

1. the site may be malleable - the attacker silently changes data or
links on the site before it is noticed. For instance, the key may be
changed, leaving the rel=me links intact.

2. the site likely doesn't use TLS - so traffic may be modified
similarly, without either party being aware of it.

...Other realistic(?) things to add?...

In either case, a key obtained from the site should be treated
cautiously before choosing to use it.

Are there further simple checks Alice's user-agent can perform, that
would otherwise be tedious for a person to do manually?

=== Approaches ===

Many 
[https://www.google.com/search?q=site%3Atwitter.com+pgp+fingerprint+-php people already tweet fingerprints of keys] as proofs of ownership of a given key.

...thoughts?...

A better approach for fingerprinting - Bob still adds [[rel-me]] links
to his canonical URL as before, but adds his key fingerprint to the
linked profile page on g+, twitter etc. This lets Alice's user-agent
automatically match fingerprints on the linked [[rel-me]] pages.

Now an attacker must be able to edit both the silo's profile page and
Bob's canonical page to fool Alice.

[[User:Ben.thatmustbe.me]] pointed out that many POSSE sites store
tokens to push to twitter etc; so an attacker might actually be able
to modify both sites. He suggests it's best to validate at least one
rel-me link to a silo whose profile pages are unlikely to be
automatically editable by a typical POSSE site. Google+, github?

Bob can also markup links to various tweets/posts/github
gists etc. from his canonical URL with something like
    <nowiki><a rel="key-fingerprint" href="...">..</a></nowiki>
Alice's contact manager can choose to follow these as "additional
proof", if it knows how to reliably obtain the silo's owner from such
links. eg: a github gist url.

Examples of indieweb users using this mechanism to offer keys along with linked fingerprints to silos - [http://waterpigs.co.uk Barnaby Walters], [http://kylewm.com Kyle Mahan], [http://kbsriram.com KB Sriram].

[http://kbsriram.com KB] also has some prototype code that shows and validates
such PGP keys and fingerprints, and displays them as follows.

[[File:barnaby.jpg]]

[[File:kbs.jpg]]

[[User:kartikprabhu.com]] suggested Webmentions - another approach to
match fingerprints from trusted sources?

The contact manager shows identities from the fingerprint-matching
pages as "confirming" the key, and Alice looks at these to decide
whether to add the key.

Prior to each use, the contact manager can also recheck the canonical
site (and confirming urls) and flag any changes -
trust-on-first-use-then-verify, aka ssh. This would also address
situations where Bob wants to publish a new key.

== Integrity ==

When accessing content from an indieweb site (say) for the purpose of
extracting the text for a [[webmention]], how can I reduce the risk
that the page was not hacked in some way? I don't want to extract
things that might contain malware links or [[xss]] content inserted by
someone who's managed to hack into their site.

I have to rely that the other person maintains a secure website at all
times, or if the roles are reversed - that I have to maintain a secure
site at all times; which seems an unreasonable demand for a typical
indieweb site.

One approach, at least for static sites where content is generated
first on the user's local machine, is to attach a digital signature
alongside the content before uploading it online.

For example, a page could have
something like
 
    <link rel="signature"
          type="application/pgp-signature"
          href="page.html.asc">

pointing to a signature alongside the file. An example from
[http://kbsriram.com KB's site] where each page is linked to a
signature.

[http://tantek.com Tantek] also suggests a link to a signature could
be provided from HTTP headers rather than the html page itself.

== Confidentiality ==


=== Private, Transient, Async Messaging ===

This is related to [[private_posts]].

==== Problem ====

I want to send a quick note/photo to one or more of my family or
friends. I'm not chatting with them - just something they can look at
when they get around to it. I trust them enough to not redistribute it
without my consent.

The data is not valuable financially, and best-effort delivery is also
fine. I just don't want anyone else to be poking into it [eg: photos
of kids, or a private discussion about someone.]

It's important that all of us can send or receive messages from any of
our devices (eg: phone or laptop.) Also, I'd like the data to have a
short expiry time in the cloud if at all possible - snapchat-ish, at
least in the cloud.

How can I set up an indieweb system that lets me do this conveniently?

==== Threats ====

Because of its async nature, the content has to stored on the cloud
somewhere. I want this data to be "safe" even if it were accessed, or
archived and examined by anyone.

That is - I'd like to have endpoint-to-endpoint security - an attacker
has to put malware on the device (or gain physical access to it)
before they alter or look into the messages.

==== Possible Solution ====

One solution to that could be called pgp messaging.

===== Goal =====

Alice (alice.com) wants to send a private message to Bob (bob.com), and bob has a public key with the fingerprint '1234'.

===== Protocol =====

Alice creates an url for bob like https://alice.com/1234/index.html.

On this url, Bob will find an encrypted html page with a redirect to a secret URL. For instance, it could be:
https://alice.com/1234/NewBase60_charset_obscure_url.html.
The encrypted redirect and the final endpoint are encrypted with Bob public key.

* redirect is necessary if Alice wants to protect how often she updates content to Bob.
* https is mandatory in this case as this will hide the obscure url.

===== Notification =====

Alice can send a webmention to Bob to notify there is new content.
It could also be an RSS feed that Bob fetches from time to time.

===== Advantages =====

The advantage of this solution is that it could work with static and non static sites.

Alice could also hide that she is in contact with Bob by answering a kind of encrypted messages for every  https://alice.com/fingerprint request. (Alice has to take care that her server takes same time to compute both answers - for a real fingerprint, or a random one)

===== Disadvantages =====

This solution requires a pgp plugin on your browser or your [[indiereader]] would need to have access to your private key.
In the case of the indiereader, if it is not hosted by you, it would be a good idea to use an 'indieweb'  sub key, signed by your primary key ([http://lists.gnupg.org/pipermail/gnupg-users/2002-August/014780.html Using subkeys]).

===== Concrete Example =====

[[User:Pierre-o.fr|Pierre-O]] wants to share private information with [[User:Waterpigs.co.uk|Barnaby Walters]].

Here is a [https://pierre-o.fr/D07762C74C1A3F57229778D0E16CA405F2D18B55/index.html link without encryption] it is for demonstration purpose. In real life, there would be just files with pgp extension.

The same [https://pierre-o.fr/D07762C74C1A3F57229778D0E16CA405F2D18B55/index.html.pgp  link with encryption].

As you can see, Barnabywalters uses his fingerprint to be redirected to an obscure URL that just him with his private key can know.

Then the interesting thing is that, I can share my phone number with him, thing I don't do on my public profile.
I can share posts and send him webmention, and he can subscribe to an encrypted rss feed.

== Criticism ==
=== May not help email security ===
Fastmail explains why they don't offer PGP - in short, it won't actually improve email security for their users, so they don't bother with it.
* {{citation
| title = Why we don't offer PGP
| url = https://blog.fastmail.com/2016/12/10/why-we-dont-offer-pgp/ 
| author = Bron Gondwana
| published = 2016-12-10
}}

== Articles ==
* {{citation
| title = I'm giving up on PGP
| url = https://blog.filippo.io/giving-up-on-long-term-pgp/
| author = <a href="https://blog.filippo.io/author/filippo/" class="h-card">Filippo Valsorda</a>
| published = 2016-12-06
| archiveurl = https://web.archive.org/web/20170619192820/https://blog.filippo.io/giving-up-on-long-term-pgp/
}}
* {{citation
| title = GPG And Me
| url = https://moxie.org/blog/gpg-and-me/
| author = <a href="https://moxie.org/" class="h-card">Moxie Marlinspike</a>
| published = 2015-02-24
| archiveurl = https://www.webcitation.org/6rJ9VBdK7
}}
* {{citation
| title = What's the matter with PGP?
| url = https://blog.cryptographyengineering.com/2014/08/13/whats-matter-with-pgp/
| author = <a href="https://blog.cryptographyengineering.com/author/matthewdgreen/" class="h-card">Matthew Green</a>
| published = 2014-08-13
| archiveurl = https://web.archive.org/web/20170619192907/https://blog.cryptographyengineering.com/2014/08/13/whats-matter-with-pgp/
}}
* {{citation
| title = Offline GnuPG Master Key and Subkeys on YubiKey NEO Smartcard
| url = https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/
| author = <a href="https://josefsson.org/" class="h-card">Simon Josefsson</a>
| published = 2014-06-23
| archiveurl = https://web.archive.org/web/20171026195422/https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/
}}
* {{citation
| title = Getting Started with GNU Privacy Guard
| url = https://spin.atomicobject.com/2013/09/25/gpg-gnu-privacy-guard/
| author = <a href="https://mikeenglish.net/" class="h-card">Mike English</a>
| published = 2013-09-25
| archiveurl = https://web.archive.org/web/20171026194833/https://spin.atomicobject.com/2013/09/25/gpg-gnu-privacy-guard/
}} and follow-ups:
** {{citation
| title = Generating More Secure GPG Keys: Rationale
| url = https://spin.atomicobject.com/2013/10/23/secure-gpg-keys/
| author = <a href="https://mikeenglish.net/" class="h-card">Mike English</a>
| published = 2013-10-23
| archiveurl = https://web.archive.org/web/20171026195043/https://spin.atomicobject.com/2013/10/23/secure-gpg-keys/
}}
** {{citation
| title = Generating More Secure GPG Keys: A Step-by-Step Guide
| url = https://spin.atomicobject.com/2013/11/24/secure-gpg-keys-guide/
| author = <a href="https://mikeenglish.net/" class="h-card">Mike English</a>
| published = 2013-12-24
| archiveurl = https://web.archive.org/web/20171026195157/https://spin.atomicobject.com/2013/11/24/secure-gpg-keys-guide/
}}
** {{citation
| title = Using an OpenPGP Smartcard with GnuPG
| url = https://spin.atomicobject.com/2014/02/09/gnupg-openpgp-smartcard/
| author = <a href="https://mikeenglish.net/" class="h-card">Mike English</a>
| published = 2014-02-09
| archiveurl = https://web.archive.org/web/20171026195241/https://spin.atomicobject.com/2014/02/09/gnupg-openpgp-smartcard/
}}
* {{citation
| title = Creating the perfect GPG keypair
| url = https://alexcabal.com/creating-the-perfect-gpg-keypair/
| author = <a href="https://alexcabal.com/" class="h-card">Alex Cabal</a>
| published = 2013-03-13
| archiveurl = https://web.archive.org/web/20170714152213/https://alexcabal.com/creating-the-perfect-gpg-keypair/
}}
* {{citation
| title = GPG Tutorial
| url = https://futureboy.us/pgp.html
| author = <a href="https://futureboy.us/" class="h-card">Alan Eliasen</a>
| archiveurl = https://web.archive.org/web/20180316174040/https://futureboy.us/pgp.html
}}, a continuously updated (“perpetual work-in-progress”) guide to all sorts of aspects of using GPG.

== See Also ==
* [https://en.wikipedia.org/wiki/Pretty_Good_Privacy Wikipedia: Pretty Good Privacy (PGP)]
* [https://en.wikipedia.org/wiki/GNU_Privacy_Guard Wikipedia: GNU_Privacy_Guard (GPG)]
