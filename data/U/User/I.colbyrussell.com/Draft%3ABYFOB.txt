https://indieweb.org/User%3AI.colbyrussell.com/Draft%3ABYFOB

'''<dfn>BYFOB</dfn>''' (Bring Your FOB[https://en.wikipedia.org/wiki/Forward_operating_base][https://en.wiktionary.org/wiki/fob], a corruption of Bring Your Own Front Backend) aka '''<dfn>S4</dfn>'''.

Benefits:

* HTTP anywhere
* full user autonomy
* continuity of identity
* minimizes preflight chatter for cross-origin requests
* open opportunity for implementing strong/powerful [[OCap]]-based security, as a fix for the Web's default origin-based security
* cheap as hell

Also:

* "Ownauth"
* "WIRe / WebID Remix"
* "service delegates"
* "endos"

consider hardware versus software.

hardware:

* high upfront cost and expensive to change

software:

* comparatively lower upfront cost and cheaper/easier to change, provided that the hardware exposes a reasonable abstraction to build on

how is this relevant?

software isn't necessarily *that* easy to change; it's hard to make a site's backend support a new standard.  some really just stupidly easy examples: (a) link headers versus links in markup, (b) integrating OAuth into an existing site, or even more simply (c) the crapshoot that is support for user control over .well-known

use case: [https://solidproject.org/ Solid]-like services for static sites and "ownauth"

== See Also ==

* [[CORS]]

== References ==

* [https://enable-cors.org enable-cors.org]
* [https://github.com/whatwg/fetch/issues/878 whatwg/fetch issue #878: Allow servers to take full responsibility for cross-origin access protection]
* [https://via.hypothes.is/https://github.com/konklone/jekyll-webfinger/tree/9bcb46bbabc08363b14fd8b41a944215539d7642#annotations:BWKWbABiEeum73vtNFTXig the problem that Webfinger (and therefore remoteStorage) poses for static sites]
* [https://mccormick.cx/news/entries/slingcode-personal-computing-platform Slingcode: Personal Computing Platform]
