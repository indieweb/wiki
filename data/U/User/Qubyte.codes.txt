https://indieweb.org/User%3AQubyte.codes

{{Infobox person
|name = Mark Everitt
|url = https://qubyte.codes
|photo_url = https://secure.gravatar.com/avatar/f8fc3404e32773a826fb635c9972746fc3135673a477f7db86d60f15dcd07c72?size=240
|chatname = qubyte
}}

I'm Mark S. Everitt, the author of <span class="h-card">https://qubyte.codes</span>

My personal site uses a [https://github.com/qubyte/qubyte-codes/ static site generator of my own design]. It's written in node and uses a promise based directed-graph based build system with hot reloading.

My needs are fairly specific, and have led me to develop a [https://qubyte.codes/blog/marqdown dialect of markdown] with special handling of language attributes and ruby annotations (amongst other things).

Static site generators aren't always a good match for IndieWeb associated technologies like Webmention and Micropub since builds are isolated (setups served from databases are easier to work with in this respect), but I've had a lot of fun engineering what I want within these constraints.

== IndieWeb things I've implemented so far ==

* Micropub (including a media endpoint) using Netlify functions. Post content is essentially proxied to GitHub using the content API, so I don't need to work with the git tree API. The media endpoint function strips metadata from photos, but further processing into more formats and sizes is done with a GitHub Actions workflow.
* I use [https://support.apple.com/en-gb/guide/shortcuts/welcome/ios iOS/MacOS shortcuts] to post links and notes with photos to my site. I also use [https://microformats.org/wiki/h-event h-event] posts to send details/duration of [https://qubyte.codes/blog/my-2022-japanese-language-study-habits study sessions] quickly from my phone or Mac menubar. I slightly broke with the spec by allowing shared secret support in addition to IndieAuth for these. I use Omnibear compiled into a Mac app to get it working with Safari for posting from my laptop.
* Webmention receipt using a Netlify function. I don't have a good solution for dealing with these right now, so for the time being mentions are validated, and then each is turned into an issue in GitHub.
* Webmention dispatch using a Netlify build plugin. I compare the atom feed before and after each build to determine new/updated/deleted posts and scan the relevant posts (both before and after in the event of an update) for mentioned URLs to send mentions to.
* Note (including an optional photo) and bookmark syndication to Mastodon with GitHub Actions.\
* [[POSSE]] to Mastodon. Publication of a note is the addition of a file to a GitHub repository. Then this happens, it triggers a build of my site, but it also triggers the run of [https://github.com/qubyte/qubyte-codes/blob/main/.github/workflows/syndicate-to-mastodon.yml a GitHub action] which formats and creates the post on Mastodon.

== TODO ==

- I'm not happy with how my site interacts with media files. Right now I commit images directly to GitHub, and an action converts these to various sizes and formats. This is good for the end result, but I don't typically like to put non-text things into git repos. I'm not going to use git LFS, so that leaves some other service to host images on. The images would be picked up at build time and continue to be hosted via Netlify. Perhaps I just need to use a bucket service like [https://cloud.google.com/storage Google Cloud Storage], [http://Amazon%20S3 Amazon s3], or [https://www.cloudflare.com/en-gb/developer-platform/r2/ Cloudflare r2].

== Good citizen of the web things ==

* Most pages don't require JS. <del>There is a service worker as a progressive enhancement for caching.</del> I removed the service worker. Pretty much everything except for HTML is subject to immutable cache headers, so the browser is doing that heavy lifting for me. And I don't think the mass/complexity of a service worker is worth it for just the HTML.
* Where JS ''is'' required (experiments, art, etc.) I use [https://qubyte.codes/blog/progressively-enhanced-caching-of-javascript-modules-without-bundling-using-import-maps unbundled, immutably cached JS modules with import maps and preloading] as progressive enhancements.
* HTML pages have various security headers added.
* No cookies or tracking. My site is for me so I don't really care about visitor numbers, referrers, etc.
* Native font stacks (no need to download and cache a font).
* Immutably cached CSS. I use mostly classless CSS so some HTML bloat is avoided. (I have no sense of style though, so it might hurt your eyes.)
* Images processed into various sizes and available in AVIF and WebP as well as JPEG as a fallback.
* [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#loading Lazy loaded images].

== Other Indieweb related things ==

* A Node.js library for discovering rel-payment links: https://www.npmjs.com/package/rel-payment
