https://indieweb.org/progressive_enhancement

{{stub}}
<span style="max-width:25%;float:right">[https://twitter.com/andybelldesign/status/1105573415891685378 <img src="https://pbs.twimg.com/media/D1fJJ3jWkAEBhsB.jpg" style="max-width:100%" alt="A wooden spoon drizzling dressing into a bowl of salad" />]</span>
'''<dfn>progressive enhancement</dfn>''' is the web development practice of building web pages, sites, apps so they are at least readable, and preferably allow for most if not all interactions, from any kind of browser, and optionally take advantage of additional capabilities (like various CSS & [[JS]] features) when available.

At a minimum, pages designed and built with progressive enhancement should be [[curlable]].

The [[BBC]] has [https://www.bbc.co.uk/guidelines/futuremedia/accessibility/html/progressive-enhancement.shtml a definition] for this that goes:

<blockquote>The core purpose of every document <strong>must not</strong> require JavaScript or CSS to function.</blockquote>

This is in stark contrast to the anti-pattern of [[JavaScript#Can_Encourage_Bad_Engineering|writing everything in JavaScript]].

== Articles ==
* {{citation
| title = Progressive Enhancement, the New Hotness™
| url = https://gomakethings.com/progressive-enhancement-the-new-hotness/
| author = [https://gomakethings.com/ Chris Ferdinandi]
| published = 2022-03-02
| archiveurl = https://web.archive.org/web/20220402125406/https://gomakethings.com/progressive-enhancement-the-new-hotness/
}}, introduces what progressive enhanvement is, as well as addresses some of the reasons given to dismiss the practice.
* https://en.wikipedia.org/wiki/Progressive_Enhancement
* 2015-08-26 {{tommorris}} <cite>[https://tommorris.org/posts/9370 A fictional conversation about progressive enhancement]</cite>
* 2013-09-03 Jake Archibald [https://jakearchibald.com/2013/progressive-enhancement-is-faster/ Progressive enhancement is faster]

== See Also ==
* [[design]]
* [[curl]]
* 2016-09-19 [https://technology.blog.gov.uk/2016/09/19/why-we-use-progressive-enhancement-to-build-gov-uk/ Why we use progressive enhancement to build GOV.UK]
* [[semantic HTML]]
* 2016-12-06 {{sonniesedge}}: [https://www.sonniesedge.net/posts/progressive-enhancement/ Yes, progressive enhancement is a fucking moral argument]
* https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/
** "A few weeks back, we were chatting about the architecture of the Individual Electoral Registration web service.  We started discussing the pros and cons of an approach that would provide a significantly different interaction for any people not running JavaScript.<br>"What proportion of people is that?” an inquisitive mind asked.<br>Silence.<br>We didn’t really have any idea how many people are experiencing UK government web services without the enhancement of JavaScript. That’s a bad thing for a team that is evangelical about data driven design, so I thought we should find out.<br>The answer is:<br><br><br>So, 1 user in every 93 has JavaScript disabled?<br>No. Surprisingly, the proportion of people that have explicitly disabled JavaScript or use a browser that doesn't support JavaScript, only makes up a small slice of people that don't run JavaScript.<br><br>So what: shouldn’t we support people without JavaScript anyway?<br>Yes, we do support them.<br>This isn’t about whether we should offer a good service to non-JavaScript people, progressive enhancement, done well, ensures we always will. But it’s interesting to know that 1 in 93 people  will experience the design without JavaScript enhancement - especially when it comes to prioritising how much of our time to spend on that design.<br>How did we calculate these numbers?<br>Unlike other interesting numbers (such as IE6 or mobile device usage) it wasn’t a simple web analytics query - not least because standard analytics packages typically capture usage through the execution of JavaScript.<br>Web server logs tell us more, but they won’t tell us whether people are running JavaScript.  Perhaps a combination of the two then?<br>Web server traffic - JavaScript analytics traffic = non-js traffic?   <br>Well, we tried this, but in short, it wasn’t accurate enough.  There was enough variance in the data as a result of local and corporate caching, bots, analytics blockers, timing, latency in the disparate logging etc to worry us about the accuracy of the data coming back.  Particularly when we’re dealing with relatively small proportions.<br>What was the solution?<br>So @tombaromba hacked some code in the GOV.UK homepage (similar to an approach inspired by an experiment Yahoo! Conducted in 2010). We chose this page because of its high volume of traffic and low likelihood of any bias towards a particular user group or demographic.<br>This code included three images, of which browsers should request two.<br>First, an image that virtually all browsers would request (the ‘base image’).<br>And either<br>an image that only browsers executing JavaScript would request (the ‘script image’)<br>an image that only browsers not executing JavaScript would request (the ‘noscript image’)<br>We deployed this code and then collected the log data from over half a million visits.  I expected that number of ‘base image’ requests would closely equal the combined ‘script image’ and ‘noscript image’ requests.<br>I was wrong.<br>509,314 visits requested the ‘base image’.<br>503,872 visits requested the ‘script image’.<br>1,113 visits requested the ‘noscript image’.<br>Which meant that 4,329 visits weren’t requesting either the ‘script image’ or ‘noscript image’.  Significantly higher than the 1,113 visits requesting the ‘noscript image’.<br>Why is there such a big difference?<br>I *now* know that ‘noscript’ tags will only be followed by browsers that explicitly have JavaScript disabled or don’t support JavaScript at all. So a significant number of people had a JavaScript enabled browser but still didn’t run the scripts successfully.<br>It’s hard to know exactly why these browsers didn’t run the JavaScript, but a number of possible reasons are:<br>corporate or local blocking or stripping of JavaScript elements<br>existing JavaScript errors in the browser (ie from browser add-ons, toolbars etc)<br>page being left between requesting the base image and the script/noscript image<br>browsers that pre-load pages they incorrectly predict you will visit<br>network errors, especially on mobile devices<br>any undoubtedly many more I haven’t even thought about...<br>So while these are interesting reasons, ultimately the reason why someone doesn’t receive the enhancements is largely irrelevant.  What's important is understanding how many people this is, and now we know.<br>Is there a trend?<br>This is the first time that we have carried out this analysis at GDS. We have earlier results from Yahoo!, which suggested that in the UK in 2010, 1.3% of people were disabling JavaScript.<br>Since 2010 there has been strong growth in the use of smartphones, most of which will receive and run JavaScript, so it’s not unexpected that the numbers have fallen slightly and I would expect that to continue.<br>We can’t be sure how comparable this data is with the Yahoo! data. The user base may be different and we can't be sure if Yahoo! was just measuring people explicitly disabling JavaScript or also including those not running it.<br>We will look to repeat this analysis on a more regular basis and will share anything interesting we find.<br>Pete Herlihy is a Product Manager, GDS<br>Follow Pete on Twitter: @yahoo_pete" [https://gds.blog.gov.uk/author/pete/ @Pete Herlihy - former Lead Product Manager for GOV.UK Notify, Government Digital Service]
