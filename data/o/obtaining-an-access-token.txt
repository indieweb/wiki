https://indieweb.org/obtaining-an-access-token

{{stub}}

Collecting notes here before moving them to the appropriate pages.

----

OAuth 2.0 defines three roles: the '''[[#Authorization Endpoint|authorization endpoint]]''', the '''[[#Token Endpoint|token endpoint]]''', and the '''[[#Resource Server|resource server]]'''.

In the context of the IndieWeb, the "resource server" will most likely be your website and your [[micropub]] endpoint.

Note: The sequence diagram needs updating to show the indieauth server metadata discovery step.
[[File:micropub-auth-flow.png|700px]]

[[File:micropub-flow-diagram.png|600px]]

----

== Manually obtaining your access token ==

You can use {{sebsel}}â€™s [https://gimme-a-token.5eb.nl/ Homebrew Access Token] to manually walk through the entire flow if you need to grab a token for yourself. (Currently doesn't support PKCE)

There is also {{jamietanna}}'s [https://tokens-pls.herokuapp.com/ tokens-pls] which performs the flow for you, and returns the token(s). This supports PKCE.

----

== Examples ==

In these examples, the following URLs will be used.

The app the user is signing in to is [[OwnYourGram]]:
* client_id = <nowiki>https://ownyourgram.com</nowiki>
* redirect_uri = <nowiki>https://ownyourgram.com/auth/callback</nowiki>

The user signing in is [[User:Aaronparecki.com|Aaron Parecki]]:
* me = https://aaronparecki.com/

In this example, Aaron has an IndieAuth server running as part of his website
* indieauth-metadata = https://aaronparecki.com/indieauth-metadata
* authorization_endpoint = https://aaronparecki.com/auth
* token_endpoint = https://aaronparecki.com/auth/token

Aaron's [[micropub]] endpoint is also on his own domain:
* Micropub Endpoint = https://aaronparecki.com/micropub

== Web Sign-In Form ==

The app, ownyourgram.com, contains a web sign-in form prompting the user to enter their URL to sign in. Upon submitting the form, the app begins the auth process by discovering the user's endpoints.

[[File:indieauth-web-sign-in.png]]

== Discovery ==

aaronparecki.com points to the two endpoints by specifying rel values on the index page.

<pre>&lt;link rel="indieauth-metadata" href="https://aaronparecki.com/indieauth-metadata"&gt;
&lt;link rel="micropub" href="https://aaronparecki.com/micropub"&gt;</pre>

== IndieAuth Metadata ==

The <code>indieauth-metadata</code> URL hosts a JSON document with metadata about the IndieAuth server. This enables a user to delegate to an external IndieAuth server if they wish, where the IndieAuth server is responsible for serving the metadata.

<pre>
{
  "issuer": "https://aaronparecki.com/",
  "authorization_endpoint": "https://aaronparecki.com/auth",
  "token_endpoint": "https://aaronparecki.com/auth/token",
  "scopes_supported": [
    "profile",
    "email",
    "create",
    "draft",
    "update",
    "delete",
    "media"
  ],
  "code_challenge_methods_supported": [
    "S256"
  ],
  ...
}
</pre>

== Authorization Endpoint ==
The authorization endpoint is responsible for requesting authorization from the user and generating an '''authorization code'''. To start the sign-in flow, the client directs the user's browser to the authorization endpoint.

=== Summary ===

==== Request ====
Values are shown without URL encoding for readability.

<pre>
https://aaronparecki.com/auth?me=https://aaronparecki.com/&
                           redirect_uri=https://ownyourgram.com/auth/callback&
                           client_id=https://ownyourgram.com&
                           code_challenge=rtVk-LWF0KvE4U_H3TZv0SCjJbP9vQ6f-bM_LOWZ5BU&
                           code_challenge_method=S256&
                           state=1234567890&
                           scope=create&
                           response_type=code
</pre>

==== Response ====
The authorization server presents this information to the user, and when they approve, generates an '''authorization code''' and redirects the user to the redirect URI specified.

<pre>
HTTP/1.1 302 Found
Location: https://ownyourgram.com/auth/callback?code=xxxxxxxx
                                                state=1234567890
</pre>

=== Authorization ===
The authorization server should present an interface describing the request being made. It must indicate:
* The <code>client_id</code> making the request, which should be a valid URL
** If [https://indieauth.spec.indieweb.org/#x4-2-client-information-discovery client metadata JSON] is found when fetching the client_id, verify the <code>client_id</code> in the JSON matches the given <code>client_id</code> in the request, and display the name and logo to the user.
** For backwards compatibility, if an HTML page with [[h-app]] markup is found when fetching client_id, verify that any u-url/u-uid property given matches the client_id, and if so display the name and logo/photo properties of the app to ease identification. Note that the client_id MUST always be verified *and* displayed prominently to prevent identity spoofing
* The requested [[scope]]
** May include an interface that allows the user to adjust the [[scope]] that will actually be granted

If the user approves the request, the authorization endpoint generates an authorization code and redirects the browser to the callback URL. (See [[authorization-endpoint]] for more details).

== Token Endpoint ==
{{main|token-endpoint}}

The token endpoint is responsible for issuing access tokens. The client sends the authorization code obtained in the previous step and expects to receive an access token in the response.

=== Summary ===

==== Request ====
Values are shown without URL encoding for readability.

<pre>
POST https://tokens.indieauth.com/token
Content-type: application/x-www-form-urlencoded

grant_type=authorization_code&
code=xxxxxxxx&
code_verifier=760057c08d5cc25ce10d153fc76f653b72cfb1c26b78028ace6f759a&
redirect_uri=https://ownyourgram.com/auth/callback&
client_id=https://ownyourgram.com
</pre>

==== Response ====
The token endpoint verifies the '''authorization code''', ensuring the SHA-256 hash of the provided <code>code_verifier</code> matches the <code>code_challenge</code> provided in the authorization request, and issues an '''access token''' in response. The response format should be a JSON OAuth token response.

<pre>
HTTP/1.1 200 OK
Content-Type: application/json

{
  "access_token": "XXXXXX",
  "token_type": "Bearer",
  "scope": "create",
  "me": "https://aaronparecki.com/"
}
</pre>


== Micropub Endpoint ==
At this point, the client now has an access token that can be used on the user's Micropub endpoint. The Micropub endpoint will validate the access token and process the request. 

See [[micropub]] for more details.


[[Category:IndieAuth]]
