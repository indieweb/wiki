https://indieweb.org/untag

{{stub}}

'''<dfn>untag</dfn>''' is sending an [[edit]] request to delete one or more [[tag]]s (often [[person-tag]]s) on someones post, where those (person-)tags possibly originated from someone else's [[tag-of]] reply post.

== Use-cases ==
=== plain text untag ===
A [[GitHub]] issue has several labels (tags) on it.

Someone (with authority to alter labels on issues) chooses the label gear widget, and clicks the close box next to a label/tag, removing it.

=== untag persontag ===
Aaron posts a photo of Sebastiaan and Tantek sees that. 
* Tantek sends a [[tag-of]] reply to Aaron, notifying that it's Sebastiaan in the photo. 
* Aaron has Tantek whitelisted for tagging, and tags Sebastiaan on the photo. 
* Tantek and Aaron both send notifications to Sebastiaan, to notify him about the tag request and the update.

Sebastiaan then sees the photo, but doesn't want to be tagged.
* He creates an untag post, in reply to both the photo post and the tag-of post, and notifies both Aaron and Tantek. 
* Aaron sees Sebastiaan wants to be untagged, and prioritizes that wish above the tag-of from Tantek, thus deletes the tag. 
* Similarly, as a result of receiving the untag post, Tantek deletes the tag-of post.

== Silo Examples ==
=== GitHub ===
[[GitHub]] supports removing labels from issues which is a form of plain text untagging.

Just like their support for [[tag-reply#GitHub|tag replies]], removing labels also shows up explicitly among the comments on an issue and has its own fragment permalink.

E.g. https://github.com/w3c/css-houdini-drafts/issues/763#event-1710566168
<blockquote>üè∑ {{t}} removed the <span style="padding:.2em; background:#09F">css-paint-api-1</span> label 5 hours ago</blockquote>

==== Github POSSE ====
Ideally you would post an untag response to a GitHub issue on your own site, and then automatically POSSE that untagging to GitHub.

Bridgy Publish feature request: 
* [https://github.com/snarfed/bridgy/issues/811#issuecomment-382469530 There is also the counterpart: 'untag-of' posts‚Ä¶]

== Brainstorming ==
=== How to mark up? ===

Possible tags:
* <code>untag-of</code> - only delete the tag(s) in the post
** issue: too specific to just tags (does that mean <code>[[u-tag-of]]</code> is also too specific?)
** issue: the name is not necessarily correct, and you may be removing the tag someone else added, thus it's not really an "un-*" action, it's a remove or delete
* <code>delete-of</code> - can be used for any number of tags/<code>u-category</code>, and also for requesting removal of other properties such as one <code>u-photo</code> of a [[multiphoto]]
** which other properties would indicate things to remove? vs about the h-entry delete-of post itself
*** remove: category, photo, ??? others (perhaps make this an explicit list that delete-of applies to?)
*** about the h-entry itself: dt-published, dt-updated, ??? should this be the default for any new properties e.g. dt-created?
** +1 {{t}} leaning towards this choice, feels like it strikes a good balance between simplicity and ability to extend to additional properties. 'delete' in the name directly corresponds to Micropub "delete".
*** Does this mean we should consider "add-of" similarly more general than "tag-of"? Maybe worth discussing in the context of [[edit]] posts in general.
** ...
* <code>h-delete</code> - an entire object to represent the full set of properties and values to be removed, close parallel of the Micropub "delete" JSON property.
** issue: nested object more cumbersome (for publishing and consuming), especially for common case of one property with one value

See also:
* https://micropub.net/draft/#remove

=== hide the untag request ===
Since the untag request also links the identity and the photo, it should not be easily discovered and thus be a [[private post]] of some kind, e.g. not listed in feeds and at a non-guessable URL. If the other parties abide the request, it can be deleted - once the original tag-post is gone, the tag won't be accidentally recreated.

== See Also ==

* [[edit]]
* [[tag-reply]]
