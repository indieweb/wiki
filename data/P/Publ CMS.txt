https://indieweb.org/Publ_CMS

{{distinguish|[[publ micropub client]]}}

'''<dfn>[http://publ.beesbuzz.biz/ Publ]</dfn>''' is a [[CMS]] written in Python. It is billed as "like a static site generator, only dynamic."

Its design is based on static publishing systems such as [[Jekyll]] or [[Pelican]], but rather than generate static HTML content, it instead dynamically maps index and entry views to page/entry content based on metadata. It's specifically designed to allow for heterogeneous types of content; for example, [https://beesbuzz.biz/ the author's site] uses the same publishing framework to provide vastly-different presentation and, in some cases, navigation mechanisms for disparate content types such as music, comics, art, and blogs.

It's also designed to keep "legacy" links intact; for example, an entry or category view can claim ownership of an older URL, and it's relatively simple to add regular expression-based URL rewriting as well. Further, if an entry is moved to a different part of the site, old links to its prior location(s) will be automatically redirected to the new permalink.

Another core tenet is that images are rendered based on the page template's requirements, and image renditions support high-DPI displays by default. Individual entries can also override the template rules as necessary, and can even specify different overrides based on which template is rendering it.

While Publ itself doesn't contain any IndieWeb functionality, it is generally a trivial matter to add such functionality in the page templates. For example, the [https://github.com/PlaidWeb/Publ-templates-beesbuzz.biz beesbuzz.biz templates] support [[microformats]], [[Atom]] (including  [[WebSub]]), [[Webmention]] (both outgoing and incoming, via [[webmention.io]] and client-side JavaScript), and [[ActivityPub]] via [[Bridgy Fed]]. 
Publ is provided as a Python library that is installable via PyPI, and can run on any WSGI-based hosting (including [[Heroku]] and [[Dreamhost]]).

== Planned features ==

=== Private Entries ===

One of the biggest planned features is the ability to make private entries which require logging in via some sort of identity provider to become known. While adding just [[IndieAuth]] would be a good start, the reality is that many people do not have the desire or ability to set up their own domain or identity site with which to provide a supported mechanism (including [[RelMeAuth]]). To that end, the [https://github.com/PlaidWeb/Authl Authl project] is an attempt at building a generic Python framework that will allow logging in via both IndieAuth and siloed OAuth identifiers, as well as being able to send an emailed "magic link," and manage the cookie/session/etc. for that purpose.

On the Publ side of things, the intent is to be able to declare various groups (similar to G+ Circles) which identifiers can be a member of (in some config file format such as Yaml or common config or the like), and then auth-required entries would have a header line like e.g.:

<code><nowiki>
Restrict: friends https://example.com/~fred !bob@example.com !https://mastodon.example.com/@alice !family
</nowiki></code>

which would mean "allow friends to see it, as well as Fred, but not Bob or Alice or anyone in the family group."

Another planned feature is being able to allow an entry to be visible to anyone who's logged in, or only to people who ''aren't'' logged in, for example (possibly using <code>*</code> as the generic group indicating people who are logged in and <code>!*</code> to indicate its opposite).

To improve the experience, Publ templates will also be able to see what the current logged-in identity is, and for those who aren't logged in, whether there are entries which would be visible if they were, improving the UX for less-technically-inclined Internet users.

Some design thoughts about how this might work in an Atom feed context are documented at the following blog entries:

* [https://beesbuzz.biz/blog/6128-Federated-access-control-with-Atom-and-WebSub Federated access control with Atom and WebSub] (a proposal for DVDCSS-style E2EE, now deprecated)
* [https://beesbuzz.biz/blog/3106-Some-more-on-authenticated-Atom Some more on authenticated Atom]
* [https://beesbuzz.biz/blog/4594-The-authenticated-Atom-musings-continue The authenticated Atom musings continue]
* [https://beesbuzz.biz/blog/4122-Authl-Yet-another-project-I-dont-have-time-for Authl: Yet ''another'' project I don't have time for]

== See Also ==
* https://github.com/PlaidWeb/Publ
* [[Pushl]]

[[Category:CMS]]
