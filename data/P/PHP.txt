https://indieweb.org/PHP

{{stub}}

'''<dfn>PHP</dfn>''' is a programming language and web server runtime environment used for many IndieWeb [[projects]].

== Projects ==
* [[Falcon]] - much of it is in [[CASSIS]] as well.
* [[Known]]
* [[p3k]]
* [[stapibas]]
* [[Taproot]]
* [[WordPress]]
* [[ProcessWire]]
* [[Kirby]]

== Libraries ==
* [https://github.com/indieweb/php-mf2 php-mf2] - Microformats 2 parser
* [https://github.com/indieweb/mention-client-php mention-client-php] - Client library for sending webmention notifications
* [https://github.com/indieweb/indieauth-client-php indieauth-client-php] - Sample implementation and helper methods for an IndieAuth client.
* [https://github.com/indieweb/php-comments php-comments] - Helper for parsing and presenting comments from external sites
* [https://github.com/indieweb/representative-h-card-php representative-h-card-php] - Find the representative h-card for a given page
* [https://github.com/indieweb?query=php more libraries on the indieweb Github]

== Articles ==
Articles about the use of PHP, especially for software that you are expected to download and install on your own domain:
* http://rachelandrew.co.uk/archives/2013/10/17/unfashionably-profitable/

== Silos ==
[[Silo]]s using PHP:

* Facebook
* [https://engineering.tumblr.com/post/152998126990/php-7-at-tumblr Tumblr]

== Troubleshooting ==
=== UTF8 ===
While there are a number of symptoms (weird looking characters, one character split into two), the problems with UTF8 handling in PHP happen for a handful of different reasons. Here are some suggested fixes for some cases.

* check the HTTP header returned, it should have:<blockquote><code>Content-Type: text/html; charset=UTF-8</code></blockquote> if it does not then you may need a line like this in your PHP code before it outputs any HTML:
* <kbd>header('Content-type: text/html; charset=UTF-8');</kbd>

=== session start failed ===
If you get an error like:
<blockquote style="font-family:monospace">
Warning: session_start() [function.session-start]: open(/home/.../tmp/sess_..., O_RDWR) failed: No such file or directory
</blockquote>
* Look like the server can't write to <samp>/home/.../tmp/</samp>
** so either it used to be able to, or it used to write to some other path
** ssh in, and see what the permissions for <samp>/home/tantek/tmp</samp>
* Or it's possible the session.save_path configuration changed. http://us2.php.net/manual/en/function.session-save-path.php

Possible resolutions:
* If your [[webhosting]] is a '''shared server'''
** start a ticket with your hosting provider, OR
** add this code to your PHP application somewhere before session access: <blockquote style="whitespace:pre"><code>if (!is_dir(ini_get('session.save_path'))) {<br/>  mkdir(ini_get('session.save_path'), 0700, true);<br/>}</code></blockquote>
*** This code auto-creates the PHP session storage directory if it doesn't already exist (inspired by the <code>mkdir</code> suggestion at [http://www.shdon.com/blog/2014/05/09/php-why-might-session_start-fail-claiming-no-such-file-or-directory], but tightened up with a conditional and tighter perms)
*** You may (should) consider providing additional error handling if the <code>mkdir</code> fails, and at some point provide the user an error message describing the error in enough detail that they can either file a support ticket with their webhosting provider, or ask a specific question in an appropriate community.
** 2014-08-07 {{t}}: These steps worked for me this past week using [[Falcon]] on shared [[webhosting]]. If Please only edit these instructions if you are documenting how you actually solved a problem firsthand, not how it might or should be possible.
** OR write a completely different non-filesystem method of session handling.
*** See: http://websec.io/2012/08/24/Shared-Hosting-PHP-Session-Security.html for specific suggestions.
* If this is on your '''[[local dev setup]]''' (e.g. yourdomain.dev on your laptop)
** check your local dev php.ini to make sure it is setting session.save_path, if not fix it.
*** don't know where is your local dev php.ini? 
**** create a file like <kbd>phpinfo.php</kbd> on your local dev setup with: <blockquote><code>&lt;!doctype html&gt;&lt;meta charset=utf-8&gt;&lt;title&gt;php info&lt;/title&gt;&lt;?php phpinfo();?&gt;</code></blockquote> 
**** go access that phpinfo.php e.g. if you put it in a test directory: yourdomain.dev/test/phpinfo.php 
**** look for "Loaded Configuration File:" and it will tell you where is your local dev php.ini, 
*** don't have a local dev php.ini? if you see: "Loaded Configuration File: (none)" then you need to make one
**** look for "Configuration File (php.ini) path" in that same output from above.
**** go to that directory and look for a <samp>php.ini.default</samp> file
**** copy it to <kbd>php.ini</kbd> e.g. with <blockquote><kbd>cp php.ini.default php.ini</kbd></blockquote>
**** if you get an error like <blockquote><samp>cp: /etc/php.ini: Permission denied</samp></blockquote> then you need to use <kbd>sudo</kbd>: <blockquote><kbd>sudo cp php.ini.default php.ini</kbd></blockquote>
*** restart your local dev setup [[Apache]], e.g. in a terminal window on your local dev machine: <blockquote><kbd>sudo apachectl -k graceful</kbd></blockquot>
*** if you see an error/warning like: <blockquote><samp>httpd: Could not reliably determine the server's fully qualified domain name</samp></blockquote> ignore it. Your local dev setup should work now.
*** if you instead (or also) saw an error like: <blockquote><samp>httpd not running, trying to start <br/>(13)Permission denied: make_sock: could not bind to address [::]:80 <br/>(13)Permission denied: make_sock: could not bind to address 0.0.0.0:80 <br/>no listening sockets available, shutting down <br/>Unable to open logs</samp></blockquote> then you forgot to use <kbd>sudo</kbd>. Try again with the exact <kbd>sudo apachectl -k graceful</kbd> command above.
** 2014-08-07 {{t}}: These steps worked for me this past week using a Macbook Air running OSX 10.7 and default [[Apache]]/PHP. Please only edit these instructions if you are documenting how you actually solved a problem firsthand, not how it might or should be possible.
* Hopefully that fixes the "Warning: session_start()" error. If not, please ask in [[IRC]] and document further description/details below this item.

== Criticism ==
=== Fatal error memory exhausted ===

Can run out of memory on servers sometimes, and give a message like:

* e.g. on http://yottabytes.info/?p=10497 (on 2014-06-08 15:28 EDT): <blockquote> Fatal error: Allowed memory size of 41943040 bytes exhausted (tried to allocate 32 bytes) in /home/johnkrol/public_html/wp-includes/post.php on line 1961</blockquote>
* Examples on: WordPress [https://wordpress.org/support/topic/fatal-error-allowed-memory-size-of-33554432-bytes-exhausted-2], Drupal [https://www.drupal.org/node/76156], and Joomla [http://forum.joomla.org/viewtopic.php?t=275276]


==== Recommendations ====

To fully avoid this problem one needs to figure out what the maximum amount of memory ones PHP process can need, check what amount of memory that is available on ones server, subtract any non-PHP processes from that amount of memory and then divide the remaining memory with the maximum amount of memory ones PHP process can need. The resulting number is the maximum amount of PHP processes one should run at once and ones server should be configured to never accept more than that or else be at the hands of the even worse fate than the mentioned white screen of death: The eternal doom of swapping that results when processes starts to use swap memory and processes therefore take much much longer to run and as a result more and more requests piles up so that the server sometimes can't recover itself at all but needs to be shut down.

Strict memory limits and limits on amount of parallel PHP processes are meant to avoid such swapping issues, but shared hosting often put very restrictive memory limits making it hard for larger and more demanding PHP applications like Drupal and WordPress to fit inside of that. The alternative is often to look at either managing a VPS oneself and configure that to fit ones application as just described or to get a managed offering from a hosting provider or a PaaS and ensure that it gets configured correctly.

An added complication when it comes to the LAMP stack is that sometimes the MySQL server is run on the same server as the PHP is and then compete for the same memory, which makes it even harder to figure out how much memory each process can be allowed to consume with the result of much stricter memory limits to be on the safe side.

== See Also ==
* [[language]]
* [[CASSIS]]

[[Category:jargon]]
* The [https://wordpress.org/about/stats/ WordPress statistics] give some overview of popularity among PHP versions
* [[Pear]]
* http://php.net/manual/en/history.php.php
