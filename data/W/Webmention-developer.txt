https://indieweb.org/Webmention-developer

<span style="margin-top: -2em; background:white; float:right;">[[File:webmention-logo.svg|160px]]<br/><a href="https://webmention.rocks/"><img src="https://webmention.rocks/assets/webmention-rocks.png" alt="Webmention Rocks" style="width:160px"/></a><br/><img src="https://indieweb.org/images/5/56/w3c-logo.svg"/></span>

This page documents technical details of [[Webmention]], specifically for '''<dfn>Webmention developers</dfn>''' so they can support cross-site [[comments]] and other [[responses]] in their code, or on their site or service.

Webmention is a [https://www.w3.org/TR/webmention/ W3C Recommendation] that supersedes [[Pingback]], using  a simple HTTP POST request and x-www-form-urlencoded content rather than [[XML-RPC]], with additional functionality (e.g. updates & deletes) as well as greater security & robustness from years of experience with prior iterations.

== Get Started Developers ==
If you already have some idea of what Webmention is and are ready to implement, work your way through:
* https://webmention.rocks/ - Webmention test suite!
Then: '''Submit an implementation report for Webmention to help document the growing interoperable decentralized webmention network!'''
* Instructions: https://github.com/w3c/webmention/tree/master/implementation-reports

== Overview ==
__TOC__
A typical Webmention flow is as follows:

# Alice posts some interesting content on her site (which is set up to receive webmentions).
# Bob sees this content and comments about it on his site, linking back to Alice's original post.
# Using Webmention, Bob's publishing software automatically notifies Alice's server that her post has been linked to by the URL of Bob's post.
# Alice's publishing software verifies that Bob's post actually contains a link to her post and then includes information about Bob's post on her site, for example, displaying it as a comment.

== Protocol Summary ==
[https://www.w3.org/TR/webmention/ Specification]

If Aaron's blog supports receiving webmentions, and Barnaby's blog supports sending webmentions, then this is how they interact:

# User Aaron posts a blog post on his blog
# User Barnaby writes post on his blog that links to Aaron's post.
# After publishing the post (i.e. it has a URL), Barnaby's server notices this link as part of the publishing process
# Barnaby's server does webmention discovery on Aaron's post to find its webmention endpoint (if not found, process stops)
# Barnaby's server sends an HTTP POST request to Aaron's post's webmention endpoint with two parameters:
#* <code>source</code> set to Barnaby's post's permalink
#* <code>target</code> set to Aaron's post's permalink.
# Aaron's server receives the webmention
# Aaron's server verifies that <code>target</code> in the webmention is a valid permalink on Aaron's blog (if not, processing stops)
# Aaron's server verifies that the <code>source</code> (when retrieved, after following redirects) in the webmention contains a hyperlink to the <code>target</code> (if not, processing stops)

What to do with the webmention once processed is unmentioned in the spec but implied (and vaguely mentioned in the pingback spec). Aaron's server can display the information about Barnaby's post somewhere on Aaron's post. 

The most popular display is to display Barnaby's post as a comment, however, how to display can vary based on what Barnaby posted, or Aaron's preferences for display. For more:
* See [[responses#Displaying_responses_to_a_post|responses: displaying responses]]
* See [[comments#How_to_display|comment: how to display]]

== How to ==
=== How to implement sending ===

Every time you:
* create a post, send Webmentions to every link in the post
* [[update]] a post, send Webmentions to every link in the post before the update and after the update
* [[delete]] a post, send Webmentions to every link that was in the post

To send a Webmention to a link:
* do Webmention endpoint discovery on that link
* send a Webmention using the endpoint, source= your page with the link, target= the link

=== How to implement receiving ===
(stub)
* set up a Webmention endpoint to receive them for you
* add Webmention endpoint discovery link to your post [[permalink]]s and any other pages you wish to receive webmentions for, like your [[homepage]]
* validate and process received Webmentions for what type it is (like a [[reply]], [[like]], [[repost]], or other [[response]]), and whether it is new, an update, or a notification of deletion.
* display received [[comments]], [[likes]], [[reposts]], and other [[responses]]

=== How to test ===
(stub)
* [https://webmention.rocks/ Webmention.rocks]
* [https://gist.github.com/epilys/5cefed33f5b720eb532f36168aad3c70 webmention_server.py dummy http server for local testing - both receives and sends webmentions]
** Useful for local webmention testing

=== How to send webmentions with cURL ===
Manually sending a webmention with [[cURL]] can be the quickest way for developers to test webmentions.

When your ''source'' URL links to a ''target'' URL:

# Find the ''target'''s webmention ''endpoint''. This may be in the HTML or in an HTTP Link header, with <code>rel=webmention</code>
# Using the ''source'', ''target'', and ''endpoint'' URLs, enter at the command line:<br> <code>curl -i -d source=''source'' -d target=''target'' ''endpoint''</code>

== Implementations ==

See [[Webmention#IndieWeb_Examples|IndieWeb Examples]]

== Libraries ==
<span id="Webmention-related_libraries_and_tools"></span>
=== Sending ===

==== Go ====
* [https://github.com/wgroeneveld/go-jamming go-jamming] - a microserver that is capable of automatically sending and receiving mentions based on your RSS feed
* [https://willnorris.com/go/webmention willnorris.com/go/webmention] - client library and command-line tool for discovering and sending webmentions.

==== Elixir ====
* [https://github.com/ckruse/webmentions-elixir ckruse/webmentions-elixir] - client library for discovering and sending webmentions.

==== Node.js ====
* [https://github.com/glennjones/webmentions glennjones/webmentions] - a helper library for endpoint discovery, pulling validating webmentions and sending webmention requests
* [https://github.com/remy/wm remy/wm (webmention.app)] - client for sending webmentions for entries in your feed

==== Perl ====
* [[Web::Mention]] - library for both sending webmentions and processing received webmentions

==== PHP ====
* [https://github.com/indieweb/mention-client-php indieweb/mention-client-php] - library for sending webmention and pingpack notifications
* [https://github.com/phpish/webmention phpish/webmention] - Simple webmention client (non-OO) packaged as a [[Composer]] package.
* [https://github.com/pear2/Services_Linkback pear2/Services_Linkback] - pingback+webmention client + server library

==== Python ====
* [https://github.com/vrypan/webmention-tools vrypan/webmention-tools] - client library and command line webmention sender
* [https://github.com/bear/ronkyuu ronkyuu] - client library and command-line tools
* [https://github.com/snarfed/webutil/blob/master/webmention.py snarfed/webutil (webmention.py)] - library for discovering endpoints and sending webmentions, small but complete

==== Ruby ====
* [https://github.com/indieweb/webmention-client-ruby indieweb/webmention-client-ruby] - library for sending webmention notifications

==== Emacs Lisp ====
* [https://github.com/wkearn/webmentions wkearn/webmentions] - library for endpoint discovery and sending webmentions from Emacs

==== .NET ====
* [https://github.com/lqdev/WebmentionFs WebmentionFs] - Library for Webmention endpoint discovery, sending, and receiving. 

=== Discovery ===
For webmention endpoint discovery:

==== Elixir ====
* [https://github.com/myfreeweb/ex_http_link ex_http_link] - '''[[Elixir]]''' Link header (RFC 5988) parser

==== Haskell ====
* [https://github.com/myfreeweb/http-link-header http-link-header] - '''[[Haskell]]''' Link header (RFC 5988) parser

==== PHP ====
* [https://github.com/indieweb/link-rel-parser-php/blob/master/src/IndieWeb/link_rel_parser.php link_rel_parser] - <code>http_rels($h)</code> & <code>head_http_rels($url)</code> - HTTP header string parser for RFC5988 Link: rels (including <code>X-Pingback</code>) & function to curl a HEAD request and parse it all in one.
** and [https://github.com/indieweb/link-rel-parser-php/blob/master/src/IndieWeb/get_rel_webmention.php get_rel_webmention] (in same library) - <code>get_rel_webmention($url)</code> - calls aforementioned functions to obtain first webmention (if any) and pingback (if any) endpoints.
* [https://github.com/phpish/link_header phpish/link_header] - Link header (RFC 5988) parser
* [http://pear.php.net/package/HTTP2 PEAR: HTTP2] - Link header (RFC 5988) parser ([http://pear.php.net/manual/en/package.http.http2.parselinks.php documentation])
* [https://github.com/Zegnat/php-webmention-endpoint-discovery php-webmention-endpoint-discovery] - library for discovering a webmention endpoint, includes experimental support for the often forgotten [https://webmention.net/draft/#avoid-sending-webmentions-to-localhost DNS checks mentioned in the spec]

==== Python ====
* [https://github.com/bear/ronkyuu ronkyuu] - client library and command-line tools
* [https://github.com/snarfed/webutil/blob/master/webmention.py snarfed/webutil (webmention.py)] - library, small but complete

==== Ruby ====
* [https://github.com/indieweb/link_rel_parser-ruby link_rel_parser] - Link header (RFC 5988) parser (port of [https://github.com/indieweb/link-rel-parser-php/ link-rel-parser-php])
* [https://github.com/indieweb/indieweb-endpoints-ruby indieweb-endpoints-ruby] - gem for discovering IndieWeb endpoints

==== .NET ====
* [https://github.com/lqdev/WebmentionFs WebmentionFs] - Library for Webmention endpoint discovery, sending, and receiving.

=== Handling ===

Handling receiving webmentions, listed by programming language / server:

==== Go ====
* [https://github.com/wgroeneveld/go-jamming go-jamming] - a microserver that is capable of automatically sending and receiving mentions based on your RSS feed
* [https://github.com/zerok/webmentiond webmentiond] - a daemon with UI for moderation

==== PHP ====
* Minimum Viable Webmention handler: https://gist.github.com/adactio/6484118
* [https://github.com/pear2/Services_Linkback pear2/Services_Linkback] - pingback+webmention client + server library
* [https://github.com/janboddez/iw-utils iw-utils] described by [https://geekcompass.com/@jan/108364622696307289 Jan Boddez] as 'a (for now) basic Webmention endpoint.'

==== Perl ====
* [[Web::Mention]] - library for both sending webmentions and processing received webmentions

==== Node.js ====
* [https://github.com/rockorager/webmention-verifier webmention-verifier] verifier. Handles mentions with arbitrary [[response]] types (<code>u-*</code>)
* [https://github.com/vandie/webmention-handler webmention-handler] webmention processing framework. Handles WebMentions asynchronously in nodejs with typescript support.

==== nginx ====
* {{citation
| title = A static, manual system for *receiving* webmentions (and pingback) with nginx
| url = http://superkuh.com/blog/2020-01-10-1.html
| author = [http://superkuh.com superkuh]
| published = 2020-01-10
| archiveurl = http://web.archive.org/web/20220615103744/http://superkuh.com/blog/2020-01-10-1.html
}}
** Nothing but [[nginx]] configuration

==== .NET ====
* [https://github.com/lqdev/WebmentionFs WebmentionFs] - Library for Webmention endpoint discovery, sending, and receiving.

=== Parsing ===
For parsing the mentions, the following may come in handy:

* [http://microformats.org/wiki/microformats2#Implementations microformats2 implementations and parsers]
* [https://github.com/barnabywalters/php-mf-cleaner php-mf-cleaner] - "Takes microformats2 array structure and makes it more sane. Counterpart to indieweb/php-mf2"
* [https://github.com/fiatjaf/went went] - Webmention Endpoint Tools, a '''Python''' library that takes '''source''' and '''target''' URLs and does the rest of the job for you.
* [https://github.com/bear/kaku kaku] - '''Python''' Flask app that handles webmentions using [https://github.com/bear/ronkyuu ronkyuu]

=== Notifications ===

The following tools show how a notification could be sent upon receiving a webmention
* PHP to email
**  https://gist.github.com/otherjoel/9301d985622f0d3d1a09
* Javascript
** bear is working on this...
* XMPP
** [[webmention.io]] [https://github.com/aaronpk/webmention.io#jabber can do this]
** - bear is working on this...

=== Verification ===

==== Ruby ====

* [https://github.com/jgarber623/webmention-verification-ruby webmention-verification-ruby] - '''Ruby''' gem for verifying a received webmention

==== .NET ====
* [https://github.com/lqdev/WebmentionFs WebmentionFs] - Library for Webmention endpoint discovery, sending, and receiving.

== Resources ==
* <span id="How_to_test_webmentions">How to test webmentions: [[webmention-implementation-guide|Implementation Guide]]</span>
* <span id="Implementation_Details">[[webmention-implementation-details|Implementation Details]]</span>
* <span id="FAQ">[[Webmention-faq|FAQ]]</span>: Please read this before filing an issue or adding to brainstorming
* <span id="Issues">[[Webmention-brainstorming#Issues|Issues]]</span>
* <span id="Brainstorming">[[Webmention-brainstorming|Brainstorming]]</span>

== Page To Do ==
Edits / improvements for this page in particular:
* Simplify this page for web developers
** simplify prose
* Re-order content as needed to to
*# motivate web developers first
*# provide the simplest, easiest thing to implement first
*# then the next simplest/easiest but still useful, etc.
* provide illustrative diagrams for protocol overview, how tos
* perhaps write up a developer-centric [[#Why]] section
* figure out how to integrate this with [[IndieMark]]

Edits to [[Webmention]]:
* keep analyzing, asking, doing:
*# How can the [[Webmention]] page be simplified to quickly:
*## make sense to [[generations]] 1-3
*## motivate [[generations]] 1-3 that they want Webmentions on their site(s)
*# Add clear instructions for enabling Webmentions with full POSSE/backfeed support with the goal of all responses to your content on social media goes back to your site, whether it uses:
*## [[Known]]
*## [[WordPress]] (depends on simpler plugin strategy? like just one instead of two)
*# Provide inspirational screenshots / diagrams of Webmention potential, e.g.
*#* [[marginalia]]

== See Also ==
* [[Webmention]]
* [[Webmention-brainstorming]]
