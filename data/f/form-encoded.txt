https://indieweb.org/form-encoded

{{ stub }} 

'''<dfn>Form-encoded</dfn>''' (shorthand for the content type: <dfn><code>application/x-www-form-urlencoded</code></dfn> ) is used with [[webmention]] and [[Micropub]] for receiving text fields in HTTP POST requests.

Some APIs (such as GitHub's OAuth API and early implementations of [[IndieAuth]] servers) return response data in form-encoded format as well, although that is generally becoming less common in favor of returning JSON responses from APIs instead.

== Why ==
By using form encoded format in your APIs, you make it possible to build simple HTML web forms that exercise or use the API, without JS. This is a huge advantage over other methods such as XML RPC, or other formats like JSON.

More:
* 2013-09-15: {{t}} <cite>[http://tantek.com/2013/258/t2/web-protocols-should-use-http-params-no-xml Why web protocols should just use HTTP+params and no XML-RPC]</cite>
* 2014-05-15: {{t}} <cite>[http://tantek.com/2014/135/t2/just-http-simple-html-form-can-send Nice side-effect of "just" using HTTP, simple HTML form (no JS) can send webmentions]</cite>

== How ==
See how [[Webmention]] and [[Micropub]] do it.

== Articles ==
Articles also recommending using of form encoded:
* [https://www.gov.uk/service-manual/making-software/apis.html#representations-are-for-the-consumer GOV.UK Representations are for the consumer] <blockquote>The representations supported by an <abbr title="application programming interface">API</abbr> for input will vary depending upon the complexity of the action, but where possible should include <code>application/x-www-form-urlencoded</code> to allow the construction of simple POST forms.</blockquote>
* ...

== Issues ==
=== Issues with Arrays ===

There appears to be some inconsistencies with how different parsers interpret arrays in form-encoded requests.  Lets document those here.

[[PHP]]'s ''parse_str'' parses properties ending in [] into an array. Otherwise, properties are single-valued (i.e. only the last value of a multi-valued property is retained).

<code><pre>
php > parse_str("property=abc&property=def", &$result);
php > var_dump($result);
array(1) {
  ["property"]=>
  string(3) "def"
}
php > parse_str("property[]=abc&property[]=def", &$result);
php > var_dump($result);
array(1) {
  ["property"]=>
  array(2) {
    [0]=>
    string(3) "abc"
    [1]=>
    string(3) "def"
  }
}

</pre></code>

[[Python]]'s ''parse_qs'' method treats all properties as possibly multi-valued. It treats [] just like any other character
<code><pre>
>>> parse_qs("property=abc&property=def")
{'property': ['abc', 'def']}
</pre></code>

== See Also ==
* [[Micropub]]
* [[webmention]]
