https://indieweb.org/tiered-architecture

<dfn>tiered-architecture</dfn> refers to the organisation of a computer system into multiple, hierarchical logical groups; with a chronological dependence. i.e. one must exist / finish before another. You might have a GitHub pages website which uses Jekyll, which would require your blog posts to be pushed to GitHub (storage), then generated by GitHub (action / task runner) in order to be served by the pages service.

== Examples in Indieweb ==

* Webmention.io has a dependency to register / access administration for a website on an IndieAuth provider to verify ownership when accessing, and ca3db compatible network service for avatar caching when requesting and I'd assume submitting a webmention.

* Having your own website required for IndieAuth is another example of a multi-actor flow, which can be multi-tier, especially when using services such as IndieLogin.com; requiring a verification service (which may be part of your website); as well as your website as a source of content and an IndieAuth provider as the orchestration provider between your source of content and the provider that can verify.

* https://indieweb.org/database-antipattern is an example of the choice to flatten or eliminate hierarchies due to user-preference and opinion; with work by Indieweb Mozillian tantek on a storage format which mitigates some of the drawbacks of using a third-party database tier https://indieweb.org/Falcon#Storage_format
