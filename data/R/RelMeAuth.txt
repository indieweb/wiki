https://indieweb.org/RelMeAuth

{{stub}}

'''<dfn>RelMeAuth</dfn>''' is an authentication method that uses personal URL for identity that [[rel-me]] link to established [[OAuth]] provider(s) to perform the actual authentication.

See: http://microformats.org/wiki/relmeauth for more details.

== IndieWeb Examples ==

Most people listed on [[irc-people]] and [[Special:RecentChanges]] have set up RelMeAuth on their personal domain, since that or [[IndieAuth]] are required to edit the wiki!

__TOC__

== Testimonials ==
=== Dan Connolly ===
<blockquote>http://microformats.org/wiki/RelMeAuth is nifty... like OpenId but even simpler.</blockquote>[https://twitter.com/dckc/status/29161666420]
=== Dan W ===
<blockquote>RelMeAuth looks good, might have to re-add rel=me's to my site http://microformats.org/wiki/RelMeAuth</blockquote>[https://twitter.com/iamdanw/status/47404917840814080]
=== Jeff Lindsay ===
<blockquote>Invited to @IndieWebCamp, didn't have IndieAuth domain to login. Took 10s to add rel="me" to homepage. No "providers". Your move OpenID</blockquote>[https://twitter.com/progrium/status/220319388207816707]

== Implementations ==
Open source implementations 
* [[IndieAuth.com]] - service and open source
* Node.js:
** https://npmjs.org/package/relmeauth
** https://github.com/superfeedr/node-relmeauth
* PHP: https://github.com/themattharris/RelMeAuth/

== FAQ ==
'''Q:''' Why does RelMeAuth need a silo backlink?

'''A:''' RelMeAuth is composed of two building blocks, [[rel-me]], and [[OAuth]]. rel-me requires bidirectional linking for confirmation of identity consolidation.

There are also usability, error detection, and recovery reasons for keeping such a double opt-in mechanism when delegating authentication. For example, it prevents one from delegating their RelMeAuth to another person's silo account.

* [http://indiewebcamp.com/irc/2014-07-23#t1406155052 IRC log]

== Issues ==

=== Selectively Displaying rel-me Info ===
Selectively Displaying rel-me Info (e.g. hiding your phone number).

Tantek points out that he would like to be able to use SMS auth on IndieAuth.com, but doesn't want his cell phone number public on his site. [https://indieweb.org/irc/2013-08-31/line/1377987957]

Ideally your site would know that the request was coming from an (your?) IndieAuth server, and only render your phone number if so.

This would require either

# some sort of pre-registration with the indieauth server so your site could verify a shared secret
# crypto signing with public keys so that pre-registration is not required

==== 1 pre-registration ====
Here is a potential example flow.

* Sign in once to your IndieAuth server
* Click a "generate shared secret" button, which is some 128-bit string that the IndieAuth server stores internally on your user record.
* You take the string and add some code like this to your home page:<br /><code>if header['IndieAuth-Secret'] == shared_secret<br />&nbsp;&nbsp;&nbsp;&nbsp;echo '<link rel="me" href="tel:+15035551212">'<br />end</code> which checks to see if the secret is passed in an HTTP header called "IndieAuth-Secret".

==== 2 public key ====

* The IndieAuth server publishes its public key in its own [[h-card]] like <code><a href="" class="u-key"></a></code>
* When the IndieAuth server makes a request to fetch the HTML of your home page, it also adds an HTTP header which is a signature of the IndieAuth server hostname, your domain name and the timestamp. It would send three additional headers:
** <code>IndieAuth-signature: [[signature of indieauth.com;example.com;1378052578]]</code> (Format is a placeholder, in reality we might use something closer to the JSON web token format or something)
** <code>IndieAuth-server: indieauth.com</code>
** <code>IndieAuth-nonce: 1378052578</code>
* When your server gets the request for your home page, it can read the IndieAuth-server header to discover which server is making the request, then go fetch its public key.
* It would then compute the signature of the three pieces of information and verify that the signature passed in the header matches, at which point it can render the private info.

Please document here if there is some other existing mechanism that can solve this!

==== potential workaround ====

A potential workaround is putting your phone number in a <code><link></code> tag in your HTML head so that it isn't visible to viewers of your web page. (Currently [https://aaronparecki.com aaronparecki.com] does this.) While this doesn't actually prevent a person from seeing your phone number, it is at least an unlikely place for them to look.

=== RDFa Parsing Problems ===

If you use [[RDFa]] and are having problems, see [[rel-me#What_About_RDFa_Problems|rel=me: What about RDFa Problems]].

=== Consolidated identities do not carry inherent trust ===

The addition of RelMeAuth ([http://microformats.org/wiki/RelMeAuth spec]) makes for two use-cases for [[rel-me]] ([http://microformats.org/wiki/rel-me spec]):

# [http://microformats.org/wiki/identity-consolidation Identity consolidation], enabling things like [http://www.kevinmarks.com/distributed-verify.html distributed verification].
# Authentication through the linked identity.

These can sometimes be at odds with each other if the user does not trust the external profile page host to handle authentication. This can be because of lax security practices, a lack of certain features like [[2FA]], or any other subjective reason.

{{martijnvdven}} has removed all <code>rel="me"</code> attributes, as of 2018-02-15, from links to websites that do not support 2FA. He only wants to use authentication providers that offer 2FA as fallbacks to his [[IndieAuth]] endpoint. Even if that meant giving up on identity consolidation.

* See also [https://chat.indieweb.org/dev/2018-02-07#t1518034782736000 the chat starting with his comment on the matter].

Possible solutions have been mentioned through an extra link relation:

# {{danq}} wrote [https://github.com/aaronpk/IndieAuth.com/issues/175 a GitHub issue] against [[IndieAuth.com]] proposing a <code>non-authoritative</code> link relation that could be added next to <code>me</code> to instruct a RelMeAuth implementation to not use that page for authentication.
# {{jjuran}} proposed a <code>auth</code> link relation [https://chat.indieweb.org/dev/2018-02-07/1518035407577300 in reaction to Martijn’s comment]. If an <code>auth</code> is detected on the page, all <code>me</code> relations should be ignored for authentication.
## this seems nicer, explicitly calling out the trusted ones, and slightly nicer to implement. Also kind of establishes a pattern of rels to check in order: authorization_endpoint, auth, me {{sknebel}}
## agreed, it's kind of like the addition of the <code>auth</code> rel value on a link upgrades that page to be more secure. {{aaronpk}}
## I can understand the desires to 1. provide a non-authorative broader identity consolidation (which you would do with rel=me as documented), 2. keep the simple rel=me way to do both consolidation and authn, 3. and a way to limit which of those you wanted used for authentication. In which case, I'd suggest "authn" as the new rel value to use. And then there are a number of possibilities for how it should work. I like the "upgrade a rel=me" semantic that {{aaronpk}} suggests. Though the effect is more of a slight downgrade of all the *other* rel=me links on the page. - {{t}}
## I don’t think it is either “upgrade” or “downgrade” at all. More of a branch off. For people with long lists of identities (I am approaching 30) trust may become an issue and thus branching authentication away from consolidation makes sense. Curious though: why the extra ''n'' in <code>authn</code> for the link relation? —&nbsp;{{martijnvdven}}
## That seems more-elegant than my suggestion; presumably we'd want ''both'' attributes (i.e. <code>rel="me auth"</code>) in cases where the resulting link both represented me ''and'' could be used to authenticate me? So the process for an authenticator would be: (a) check for "auth", failing that (b) check for "me", and the process for a different service simply spidering for where I am found on the web found be: (a) just check for "me". {{danq}}

== Articles ==
* {{citation
| title = On the Indie Web Camp Sign In UX Barrier
| url = https://waterpigs.co.uk/articles/indiewebcamp-signin-ux/
| author = {{barnabywalters}}
| published = 2013-08-31
| archiveurl = https://web.archive.org/web/20180227093248/https://waterpigs.co.uk/articles/indiewebcamp-signin-ux/
}}
* {{citation
| title = On evolving IndieAuth.
| url = https://ar.al/notes/on-evolving-indieauth/
| author = [https://ar.al/ Aral Balkan]
| published = 2013-08-31
| archiveurl = https://web.archive.org/web/20180227093459/https://ar.al/notes/on-evolving-indieauth/
}}
** [[On Evolving IndieAuth Followup]]
* {{citation
| title = How to set up Web Sign In on your @squarespace website
| url = https://waterpigs.co.uk/articles/squarespace-web-sign-in/
| author = {{barnabywalters}}
| published = 2013-12-08
| archiveurl = https://web.archive.org/web/20180227093118/https://waterpigs.co.uk/articles/squarespace-web-sign-in/
}}

== Brainstorming ==

=== Alternative flow for RelMeAuth via email ===

* ask the user for their email address (like Slack and nearly every other service)
* fetch the web page at the domain of their email address (e.g. aaron@aaronpk.com -> fetch https://aaronpk.com)
* look for rel=me links on that page
* if there is a rel=me link to their email address, use their domain name as their RelMeAuth identity
* send a one-time link to their email address
* when clicked, sign them in as their domain

note: obviously have a blacklist of bigco email providers domains that no one owns as a personal domain (gmail.com, hotmail.com, etc.)


== See Also ==
* https://twitter.com/relmeauth
* [[IndieAuth]]
* [[microformats]]
* [[sign-in-use-cases|Web Sign-In Use Cases]]

[[Category:IndieAuth]]
