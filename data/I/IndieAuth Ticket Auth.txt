https://indieweb.org/IndieAuth_Ticket_Auth

== Use-cases ==
Use-cases that inspired the development of this protocol:
* be able to fetch private posts from someone's feed
* don't rely on a "follow request" in order to do so
* ...

== Brainstorming ==

=== Step 1: Decide to issue an access token ===

Alice has choosen to share private things with Bob. 

This is in contrast to a mechanism of advertising the fact that there may be private/protected content at a URL by using something like a WWW-Authenticate header. By indicating there may be more to see at a URL, that itself is leaking information.

The decision to share could be triggered by Bob notifying Alice that he is following Alice. This isn't strictly necessary but may provide a better user experience for granting these tokens.

* TODO: methods of Bob notifying Alice could be a [[follow]] post, or some other protocol, but is not related to authentication or required.


==== Why not send the access token directly? ====

When you send a ticket, you are sending an unsolicited payload to the receiver. The ticket is not requested by the receiver, so you cannot guarantee they will be protecting it if they aren't expecting it. (It may be logged in intermediate proxy servers, written to log files on the server, etc.) If the receiver supports receiving tickets, then they will be explicitly requesting an access token by exchanging the ticket, so you can be more confident they will take measures to protect the access token. This way the access token is only delivered via an explicitly requested HTTPS connection to your server.

Additionally, given some IndieAuth servers don't support expiration of tokens, this could allow permanent access to protected data, which is not ideal.

=== Step 2: Issue an access token ===

Alice has decided to send an access token to Bob. (Either because Alice decided to out of the blue, or because Alice noticed Bob's follow notification.)

==== Create the IndieAuth ticket ====

Alice generates a short-lived ticket which will last approximately a minute at most. The reason for short-lived is that you are sending something unsolicited to someone and it is safer to send something short-lived and single use, and require action to retrieve the actual token.

* Feed URL = https://alice.example.com/
* Ticket = 32985723984723985792834
* Deliver to ticket endpoint of the subject: https://bob.example.org/

Alice makes a GET or HEAD request to discover the ticket endpoint of https://bob.example.org/, searching for an HTTP Link element or a HTML <link> element with the appropriate rel value, <code>ticket_endpoint</code>.

* https://auth.example.org/ticket

Alice makes a POST request to the ticket endpoint.

* <code>ticket</code> - a random string that can be redeemed for an access token
* <code>resource</code> - the access token will work at this URL
* <code>subject</code> - the access token should be used when acting on behalf of this URL

<pre>POST https://auth.example.org/ticket
     Content-Type: application/x-www-form-urlencoded

ticket=32985723984723985792834
&resource=https://alice.example.com/
&subject=https://bob.example.org
</pre>

This is basically saying "if you wanted to fetch this feed as this person and see private stuff, here's a ticket you can use to get an access token".

==== Redeem the ticket for an access token ====

Bob's ticket endpoint redeems the ticket for an access token

The ticket endpoint makes a GET or HEAD request to discover the token endpoint of https://alice.example.org/, searching for an HTTP Link element or a HTML <link> element with the appropriate rel value, <code>token_endpoint</code>. 

The ticket endpoint makes a POST request to the token endpoint to exchange the ticket for an access token. The POST request contains the following parameters:

* <code>grant_type=ticket</code>
* <code>ticket</code> - The ticket to be redeemed

===== Example =====

<pre>POST https://alice.example.com/token
  Content-type: application/x-www-form-urlencoded
  Accept: application/json

  grant_type=ticket
  &ticket=32985723984723985792834
</pre>

Response is an access token as specified in the <a href="https://indieauth.spec.indieweb.org/#access-token-response">IndieAuth Spec</a>.

=== Step 3: Use the access token ===

Now Bob's authorization endpoint has the remote access token that could be used to fetch Alice's feed.

How to get it to the reader or the webmention endpoint verifier is up to those implementations, it may be internal, or may use another spec to coordinate.

=== Notes ===
Advantages:
* The thing that gets tokens only needs one new public endpoint, the endpoint that receives tokens
** Sample code: https://gist.github.com/aaronpk/ae61731cc57a707b5076899d5c8371b1
* Issuing tokens is completely voluntary, and does not have to be prompted by an action by the eventual receiver of the token

== Token Issuing ==
How a website decides to issue tokens does not need to be defined by this spec.

{{aaronpk}} created an interface to be able to send tickets to arbitrary URLs, and shows the token info after the ticket has been redeemed.

[[File:aaronpk-ticket-admin.png]]

== Open questions ==

*Would a token grant access to anything more specific than the provided resource, or would it be only for that specific resource? (e.g. should a token for <code>https://example.com/alice/</code> also work on <code>https://example.com/alice/feed</code>)
** Giving meaning to the URLs like this is convenient but may be misleading or break security boundaries in unexpected ways.
** An alternative would be to include another parameter, such as the previously discussed "realm", or somehow using scopes for this.
** Following [https://www.rfc-editor.org/rfc/rfc8707.html#section-2 RFC8707: Resource Indicators for OAuth 2.0] this would mean allowing <code>resource=https://example.com/alice/</code> to be used to retrieve the value of <code>https://example.com/alice/feed</code>
*** This allows the use of multiple <code>resource</code> parameters for the purpose of multiple resource URLs to provide access to

*Any provision for providing an expiry time as part of the granted ticket?
** What would the use case be? Just like OAuth authorization codes, these are extremely short lived and there is no recourse if they expire other than starting over
*** {{jamietanna}} wonders if this is more about allowing the granted token to expire? That should be clear when redeeming the ticket and receiving an <code>expires_in</code> in the response from the token endpoint, and the optional presence of a <code>refresh_token</code>

* Should it be assumed that the ticket endpoint will automatically redeem all tokens? It's technically an implementation detail, not a requirement of the spec, but witht he amount of time the ticket is valid, this seems a good move. Assuming the token endpoint supports revokation.

[[Category:IndieAuth]]

== See Also ==
* [[IndieAuth]]
* [[authentication]]
* https://beesbuzz.biz/blog/12341-Private-friends-only-IndieWeb-stuff
* https://david.shanske.com/2021/06/27/thinking-about-ticket-auth/
