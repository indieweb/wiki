https://indieweb.org/Micropub-extensions

This page is for documenting extensions to [[Micropub]]. Please use this page to document the list of current and proposed extensions, as well as document implementations of them. Development and discussion of the extensions should happen in a GitHub issue. 

Please open a new issue [https://github.com/indieweb/micropub-extensions/issues here] if you would like to propose a new extension, then you can add a new section in the [https://indieweb.org/Micropub-extensions#Proposed_Extensions Proposed Extensions section] to document your implementation of it here.

== Approval of Extensions ==
The core Micropub spec isn't expected to change, however additional specifications built to extend the Micropub spec are possible. In order to ensure that extensions have diverse implementations there is a three stage process for extensions.

=== Proposed ===
Anyone can create a '''proposed''' extension. A proposed extension should have an issue [https://github.com/indieweb/micropub-extensions/issues in the Micropub Extensions GitHub Repo] and a stub under the [https://indieweb.org/Micropub-extensions#Proposed_Extensions Proposed Extensions section] on this page.

=== Stable ===
A stable extension is when a proposed extension has gotten multiple implementations from various people and/or organizations and is considered complete in functionality. This ensures that Micropub extensions work for a variety of use-cases and not just for a single project or company. The general rule of thumb is that there should be a minimum of 3 server implementations and 3 client implementations.

When an extension becomes a '''stable''' extension, it should be moved under [https://indieweb.org/Micropub-extensions#Stable_Extensions Stable Extensions section] and there should be clear technical specifications for how a client and server would utilize this extension. All brainstorming under this extension should either be finished and cleared out, or logged under a different proposed extension.

=== Official ===
An extension only becomes an official Micropub extension when it has been published as part of a broader ranged official Spec extension for Micropub. Currently there are no official extensions.


== Official Extensions ==
There are not currently any Official Extensions

== Stable Extensions ==

=== Query for Supported Vocabulary ===
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/1

This is an extension for returning what properties a Micropub server supports, so that a client like [[Quill]] or [[Indigenous]] could know to hide or rename the common choices in the UI. This is essentially using reverse [[Post Type Discovery]].

This extension adds additional data to the [https://www.w3.org/TR/micropub/#configuration Micropub Configuration query] that allows the server to tell the client what types of posts it can receive as well as what those post types should be called in the UI.

When a Micropub client retrieves the [https://www.w3.org/TR/micropub/#configuration Micropub Configuration query], a server supporting this extension should return an array of objects inside the <code>post-types</code> attribute. Each object should represent a post type and have a <code>type</code> attribute that matches the [[PTD]] post type and a <code>name</code> that is a string that should represent the post type in the UI.

An example response is below:

<pre>
  "post-types": [
    {
      "type": "note",
      "name": "Note"
    },
    {
      "type": "article",
      "name": "Blog Post"
    },
    {
      "type": "photo",
      "name": "Photo"
    },
    {
      "type": "reply",
      "name": "Reply"
    },
    {
      "type": "bookmark",
      "name": "Bookmark"
    }
  ]
</pre>

If a Micropub client checks the Micropub Configuration query for a <code>post-types</code> array and it doesn't exist or it is empty, the client should assume the server does not support this extension and just default to its regular post types and names. However, if at least one object exists in the <code>post-types</code> array, the Micropub client '''should''' only display features related to the post types found in the array, and any text in the UI should reflect the name presented in the post-types array.

==== Implementations ====
* Clients
** [[Quill]]
** [[Indigenous for Android]]
** [[Monocle]]
* Servers
** [[Micro.blog]]
** [[abode]]
** [[IndieWeb for Drupal]]
** [[IndieKit]]

== Proposed Extensions ==

=== Server Commands ===
The Micropub spec reserves the <code>mp-</code> prefix in the form-encoded syntax as a mechanism for clients to give commands to servers. This section is for brainstorming additional uses of the <code>mp-</code> functionality.

==== Slug ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/projects/1

Many posting UIs provide an option for the user to choose a slug for the post that will be created. 

[[File:wordpress-customize-slug.png]]

This proposal is for a new mp- command for the client to suggest a slug to the Micropub endpoint.
 
* <code>mp-slug=</code>

The server may or may not decide to respect the requested slug, based on whether it would cause conflicts with other URLs on the site. For example, some URL structures are <code>{year}/{slug}</code>, so the server may decide to modify the slug to avoid conflicting with an existing one.

===== Implementations =====
* Clients
** [[Quill]]
** [[Micropublish]]
* Servers
** [[p3k]]
** [[Transformative]]
** [[Micropub for WordPress]]
** [[Postr]]
** [[abode]]
** [[IndieKit]]

==== Destination ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/projects/4

* <code>mp-destination=https://mysite.example.com/</code>

Specify a destination to create a new post on a web site other than the default. The value of <code>mp-destination</code> should be a uid from the array of destinations returned from q=config. See [https://gist.github.com/manton/52e0015f87fcf50c687a0c64e392fc37 an example query response here].

===== Implementations =====
* Clients
** [[Monocle]] - Monocle will check if your Micropub server returns a list of destinations and will then provide an account chooser UI in the footer when viewing a timeline. Selecting an account will cause any of the response buttons to be sent with the corresponding <code>mp-destination</code> value.
* Servers
** [[p3k]]
** [[micro.blog]]

=== New Properties ===

==== Post Status ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/19

This is currently under consideration for becoming a "stable" extension. Please see the GitHub issue above to help resolve the remaining issues holding it up from becoming a stable extension.

* <code>post-status=published</code> (or no post-status set) - The post is published, or when the published date is in the future, the post is scheduled.
* <code>post-status=draft</code> - The post is a draft, and should not be shown in lists. (Of course it's up to the implementation whether it wants to use a capability URL for draft posts or actually restrict it to logged-in users.)

===== Implementations =====
* Clients
** [[Quill]]
** [[Indigenous for Android]]
**[[Micro.blog]]
* Servers
** [[p3k]]
** [[Micropub for WordPress]]
** [[IndieWeb for Drupal]]
** [[Postr]] - also uses <code>post-status=deleted</code>
** [[Micro.blog]]
** [[abode]]

==== Visibility ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/11

This extension proposed a new property for use in Micropub requests called <code>visibility</code> that informs a server whether a post should be public, private or unlisted. If no visibility is set, a server '''should''' assume the visibility is meant to be public. If the visibility is set to unlisted, a server has flexibility to treat that how it wants, however this typically means the post wouldn't appear in feeds such as galleries, timelines or streams. If the visibility is set to private, that means this post should not be accessible unless viewed by an authenticated user. (See [[Micropub-extensions#Audience|audience]] for more details.)

* <code>visibility=public</code> (or no visibility set)
* <code>visibility=unlisted</code>
* <code>visibility=private</code> (this may need to be renamed "protected", [https://github.com/indieweb/micropub-extensions/issues/11 see discussion])

Beyond the scope of this discussion is how a user authenticates for a private post, and if they are authenticated how the access control is managed for said post. But this means depending on the server a private post could be viewable by a single person, or it could allow a group of authorized people to view it as long as they are authenticated.

===== Implementations =====
* Clients
** [[OwnYourSwarm]]
** [[Quill]]
** ...
* Servers
** [[Micropub for WordPress]]
** [[p3k]]
** [[abode]]
** [[Postr]]

==== Location Visibility ====

Proposal by {{gwg}} 

* <code>location-visibility=public</code> (or no visibility set)
* <code>location-visibility=private</code>
* <code>location-visibility=protected</code>

This is based on {{gwg}}'s implementation in Simple Location, an Indieweb friendly location plugin, of the WordPress Geodata unofficial guidelines. It states a single property which can be set to public or private, with the absence of the property being considered to be public. Proposing the third property, which will allow for a less specific text only display, but no actual coordinates.

===== Implementations =====
* Clients
** Indigenous for Android
* Servers
** [[Micropub for WordPress]]

==== Audience ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/12

This is a proposed extension that allows a Micropub client to tell a server who should be able to access a private post. This is specifically useful with the draft of [[AutoAuth]] and the idea of sending private webmentions or creating posts that can be read by only a small group of people.

===== Implementations =====
* Clients
** ...
* Servers
** [[abode]]

=== Query ===
Micropub supports making a GET request to a Micropub endpoint with a <code>q=</code> parameter, in order to query aspects of the endpoint or for retrieving the original source content of posts. This section is for brainstorming additional uses of the query functionality. See also [[Micropub-brainstorming#Query_for_other_information]]

==== Query for Post List ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/4

This is a possible extension to the q=source query on my micropub endpoint, if no url is provided it returns a list of posts. This makes the url part of the query really into more of a filter. This would be super handy for clients wanting to present a list of posts to edit/delete/undelete.

Another advantage of this extension is that your micropub server is just responsible for storing and listing posts as microformats, rendering posts can be another bit of software's responsibility 

<pre>
{
 "items": [
  {
    "type": [
      "h-entry"
    ],
    "properties": {
      "like-of": [
        "https:\/\/en.m.wikipedia.org\/wiki\/Poka-yoke"
      ],
      "uid": [
        "20170820131258_59998adae54d0"
      ],
      "published": [
        "2017-08-20T13:12:58+00:00"
      ]
    }
  },
  {
    "type": [
      "h-entry"
    ],
    "properties": {
      "photo": [
        "https:\/\/media.j4y.co\/2017\/cfd007ec-c819-47da-99a2-daec2e91a41e.jpg"
      ],
      "published": [
        "2017-08-19T18:30:40+00:00"
      ],
      "content": [
        ""
      ],
      "category": [
        ""
      ],
      "uid": [
        "20170819175715_59987bfb72c4f"
      ]
    }
  }
}
</pre>

===== Implementations =====
* Clients
** [[Indigenous for Android]]
** [[Micro.blog]]
* Servers
** [[abode]]
** {{j4y_funabashi}}
** [[IndieWeb for Drupal]]
** [[Micropub for WordPress]]
** [[Postr]]
** [[Micro.blog]]
** [[IndieKit]]

==== Query for Category/Tag List ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/5

This is an extension for returning categories that a Micropub server has received in the past, so that a client like [[Quill]] or [[Indigenous]] could present a list of existing categories to choose from when creating a new post. This also incorporates the possibility of being able to search for categories that would match an auto-complete.

The following example would be returned as part of the <code>?q=category</code> query.
<pre>
{
  "categories": [
    "tag1",
    "tag2",
    "tag3",
    "tag4",
    "tag5",
  ]
}
</pre>

The follow example would be returned as part of the <code>?q=category&search=indie</code> query.
<pre>
{
  "categories": [
    "indieweb",
    "indieweb-goals",
    "indienews"
  ]
}
</pre>

===== Implementations =====
* Clients
** Indigenous for Android
* Servers
** [[Micropub for WordPress]]
** [[IndieWeb for Drupal]]
** [[abode]] ({{eddiehinkle.com}})
** [[Micro.blog]]
** [[Postr]]
** [[IndieKit]] ({{paulrobertlloyd}})

===== Brainstorming =====
[[category]] - [https://chat.indieweb.org/2017-01-18#t1484741717234000 suggestion] to get all existing tags/categories in the client. Expectation is client would cache and do autocomplete


==== Query for Supported Properties/Queries ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/7
: https://github.com/indieweb/micropub-extensions/issues/8

These are two extensions for returning queries that a Micropub server will respond to and properties that a server knows about, so that a client like [[Quill]] or [[Indigenous]] could present only options appropriate to that server. It is similar to the idea about querying for supported vocabulary, except that proposal only covers properties that are part of post-type discovery. Like with the other proposal, the absence of this instruction would show everything.

The following example would be returned as part of the <code>?q=config</code> query for supported queries.
<pre>
{
  "q": [
    "config",
    "syndicate-to",
    "category",
    "source",
    "geo",
  ]
}
</pre>

The following would be returned as part of the <code>?q=config</code> query for supported experimental properties unrelated to post-types. These are experimental properties that would require a field within the UI.
<pre>
{
  "properties": [
    "location-visibility",
    "visibility",
    "post-status",
  ]
}
</pre>

Alternatively, if the property is defined as an enum in the spec, this is an alternative way to represent the supported values of the enum. In this case, this is a way to indicate which visibility properties are supported:

<pre>
{
  "visibility": [
    "public",
    "unlisted",
    "private"
  ]
}
</pre>

===== Implementations =====
* Clients
** Quill ([more info](https://github.com/indieweb/micropub-extensions/issues/8#issuecomment-536301952))
* Servers
** [[Micropub for WordPress]]
** [[IndieWeb for Drupal]]

==== Query for Location/Venue ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/6

{{jonnybarnes}} originally added Query for Places in 2015. His implementation was for /micopub?q=geo=lat.lng;u=XX, returning a JSON response for each place containing a display name, lat/lng value, and a URL that could be used as the location value in a subsequent request. 

{{gwg}} expanded on that to be consistent with the current thinking that returns should be inside a property and to allow for a geo URI or the individual parameters. The geo=lat.lng;u=xx is close to the geo URI format of geo:37.786971,-122.399677;u=35 but in the interest of consistency should actually be a GEO URI and a separate property. Therefore, the query for a request with a Geo URI should be ?q=geo&uri=geo:37.786971,-122.399677;u=35  or optionally, each variable individually... q=geo&lat=x&lon=y&u=z 

The following example would be returned as part of the <code>?q=geo&lat=x&lon=y</code> query. Return would contain two properties, 'venues' and 'geo'. Geo would be a suggestion for the queried location perhaps returned using reverse geolocation, and venues would be one or more venues. The lack of either property assumes nothing could be found about the location.

All returns would follow the common properties of an h-adr object with only label and latitude/longitude being mandatory. There is one optional extra parameter, following the proposed [https://indieweb.org/Micropub-extensions#Location_Visibility Location Visibility] property which would allow the query to suggest whether this location should be publicly displayed, allowing for private venues. 
<pre>
{
  "geo": [
    "label" : "123 Main Street",
    "latitude": "18.1123",
    "longitude": "-72.1933",
    "visibility": "public",
  ],
  "venues": [
   { 
     "label" : "Main Street Apothecary",
     "latitude": "18.1123",
     "longitude": "-72.1931",
     "url": "https://example.com/venues/apothecary",
   },
   { 
     "label" : "Main Street Market",
     "latitude": "18.1123",
     "longitude": "-72.1931",
     "url": "https://example.com/venues/market",
   },
  ]
}
</pre>

===== Implementations =====
* Clients
** [[Indigenous for Android]] - uses the geo property, places as suggestions
* Servers
** [[Micropub for WordPress]] - uses the geo property only
** [[IndieWeb for Drupal]] - uses the geo property, can return places

==== Query for contacts ====

For apps to be able to autocomplete by known contacts we need some way to query these values. This would be very useful for [[person-tag]] 

This is supported by the Drupal IndieWeb module and Indigenous for Android.

* Discovery of the endpoint (as in, it exists), happens through the query for supported queries, see https://github.com/indieweb/micropub-extensions/issues/7
* <code>q=contact&search=aaron</code> would do a search for any field which matches .<code>*aaron.*</code> thereby allowing the client application to [[autosuggest]] and insert links.
* <code>q=contact</code> would return the complete list, which should only be so that clients (e.g. [[Indigenous]]) can cache all contacts locally.
* The response in JSON is a list of [[h-card]]s.
===== Example response =====
'''GET ?q=contact'''

<pre>
  "contacts": [
    {
      "name": "Kevin Marks",
      "photo": "http://known.kevinmarks.com/file/9255656669173b7867ab839ee6556f9e",
      "url": "http://known.kevinmarks.com/profile/kevinmarks",
      "nickname": "kevinmarks",
    },
    {
      "name": "Kristof De Jaeger",
      "photo": "https://realize.be/vue/images/swentel-200.png",
      "url": "https://realize.be",
      "nickname": "swentel"
    },
  ]
</pre>

===== Implementations =====

* Clients
** [[Indigenous for Android]] - see https://realize.be/notes/1970 - it fetches the full list, filtering happens in the client
* Servers
** [[IndieWeb for Drupal]]

==== Brainstorming ====

==== Ideas for other types of queries ====
* [[mp-config]]
* extended markup formats – right now it is relatively dependent on the server implementation how text content is treated (1:1, basic processing like linking URLs, Markdown, ...). A query could expose information about this (and maybe even be part of a way to choose for the user)
* media endpoint history – query recent uploads to the media endpoint, e.g. the last X photos uploaded from a phone

==== Questions ====

* According to the current spec (2017-01), a <code>GET ?q=config</code> should also include the <code>syndicate-to</code> property. If the collection of supported properties grows, is this still a thing to hold on to? Venues and tags can make the response potentially large. {{Sebsel}}
** Agreed, I think the empty <code>GET ?q=config</code> should be very limited, and clients should reqest things with potentially large responses separately. <span class="h-card" style="white-space:nowrap">{{sparkline|https://aaronparecki.com/photo.jpg}} [[User:Aaronparecki.com|Aaron Parecki]]</span> 11:40, 11 April 2018 (PDT)

=== Other ===

==== Dealing with Expiring Tokens ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/17

Currently IndieAuth and Micropub don't talk about how to deal with expired tokens, whether auto-expiring tokens or revoked tokens. To get a new token, most Micropub clients will make you log out and back in. However in the new Micropub client era with native apps and Reader web apps, you might not want to have to log out and back in just to refresh your token. (more details for brainstorming available in GitHub issue)

==== Dealing with Expiring Configuration ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/18

There are instances where the configuration of a Micropub endpoint can change. Currently both the Media Endpont url and the syndication values are in the Micropub's config query. Because the Media Endpoint is an external service it makes sense that at times this url may change, and the user shouldn't have to log out and back in to update that value. (more details for brainstorming available in GitHub issue)

==== Location checkin information ====

Indigenous for Android has a checkin post type which passes the checkin information as additional parameters in the Geo URI. The payload property is 'checkin'. It's not doing a JSON post, so you can also immediately upload pictures as well. Additional properties for the venue/location can be added later. The same technique is used to post my geocache logs, see https://indieweb.org/geocaching

<pre>
geo:51.5258325,-0.1359825,0.0;name=london;url=https://hwclondon.co.uk
</pre>

This is supported by:
* [[IndieWeb for Drupal]]. An example can be found here: https://realize.be/checkin/1762
* [[WordPress Micropub Plugin]]

==== Post contacts ==== 

Clients should be able to add or update h-cards.

Adding or updating also happens on the q=contact endpoint, but with a POST request.

Properties: h=card&name=Contact name&nickname=Nick&photo=photo&url=url

=== Media Endpoint Extensions ===
==== Last Uploaded Query ====
; '''Issues and discussion:''' 
: https://github.com/indieweb/micropub-extensions/issues/10

This is a proposed extension to the [https://www.w3.org/TR/micropub/#media-endpoint Media Endpoint] section of the Micropub spec, where the Media Endpoint will return the last uploaded media element.

===== Implementations =====
* Clients
** [[Quill]]
** ...
* Servers
** [[Micropub for WordPress]]
** [[IndieWeb for Drupal]]
** [[IndieKit]]

== See Also ==
* [https://micropub.net/draft/ Latest Editor's Draft]
* [[Micropub]]
* [[Micropub-brainstorming]]

[[Category:Micropub]]
